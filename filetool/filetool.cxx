// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include <libintl.h>
#include "filetool.h"
// (c) Robert Shingledecker 2008
#include <iostream>
#include <fstream>
#include <string>
#include <Fl/fl_ask.H>
#include <FL/fl_message.H>
#include <locale.h>
using namespace std;
static string device_name; 
static string command = "sudo /usr/bin/filetool.sh "; 

void input_callback(Fl_Widget*, void*) {
  btn_none->activate();
btn_backup->activate();
btn_restore->activate();
}

void btn_callback(Fl_Widget*, void* userdata) {
  device_name = (const char*)input_device->value();
if (device_name.size() == 0)
   return;
if (userdata == "none")
{
   if (fl_ask("This will clear the selected backup device\nand prevent the backup from occuring."))
   {
      system("> /opt/.backup_device");
      exit(0);
   }
}

string action = (const char*)userdata;
command += action + " " + device_name;

if (system(command.c_str()) !=0)
{
   fl_message("Error occured.\nMake sure you are using a valid backup/restore device. Some errors are logged in /tmp/backup_status");
   return;
} else
   exit(0);
}

Fl_Input *input_device=(Fl_Input *)0;

Fl_Button *btn_none=(Fl_Button *)0;

Fl_Button *btn_backup=(Fl_Button *)0;

Fl_Button *btn_restore=(Fl_Button *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");
  { Fl_Double_Window* o = new Fl_Double_Window(225, 80, gettext("Filetool"));
    w = o;
    { input_device = new Fl_Input(65, 7, 150, 25, gettext("Device:"));
      input_device->callback((Fl_Callback*)input_callback);
      input_device->when(FL_WHEN_CHANGED);
    } // Fl_Input* input_device
    { btn_none = new Fl_Button(10, 40, 64, 30, gettext("&None"));
      btn_none->callback((Fl_Callback*)btn_callback, (void*)("none"));
      btn_none->deactivate();
    } // Fl_Button* btn_none
    { btn_backup = new Fl_Button(80, 40, 64, 30, gettext("&Backup"));
      btn_backup->callback((Fl_Callback*)btn_callback, (void*)("-b"));
      btn_backup->deactivate();
    } // Fl_Button* btn_backup
    { btn_restore = new Fl_Button(150, 40, 64, 30, gettext("&Restore"));
      btn_restore->callback((Fl_Callback*)btn_callback, (void*)("-r"));
      btn_restore->deactivate();
    } // Fl_Button* btn_restore
    o->end();
  } // Fl_Double_Window* o
  ifstream fin("/opt/.backup_device");                                  
getline(fin,device_name);                                        
fin.close();

if (device_name.size() != 0)
{
    input_device->value(device_name.c_str());
    btn_none->activate();
    btn_backup->activate();
    btn_restore->activate();
}
  w->show(argc, argv);
  return Fl::run();
}
