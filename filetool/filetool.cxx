// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "filetool.h"
// (c) Robert Shingledecker 2008-2010
# include <cstdlib>
#include <iostream>
#include <fstream>
#include <string>
#include <Fl/fl_ask.H>
#include <FL/fl_message.H>
#include <locale.h>
using namespace std;
static string device_name; 
static string command = "sudo /usr/bin/filetool.sh "; 

void input_callback(Fl_Widget*, void*) {
  filetool_choice->activate();
btn_go->activate();
}

void btn_callback(Fl_Widget*, void* userdata) {
  device_name = (const char*)input_device->value();
if (device_name.size() == 0)
   return;
   
string action;   
int filetool_action = filetool_choice->value();
switch(filetool_action)
{
   case 0  : action = "none";
             break;
   case 1  : action = "-b";
             break;
   case 2  : action = "-bs";
             break;
   case 3  : action = "-r";
             break;
   default : action = "-b";
}             
   
if (action == "none")
{
   if (fl_ask("This will clear the selected backup device\nand prevent the backup from occuring."))
   {
      system("> /opt/.backup_device");
      exit(0);
   }
   return;
}


window->cursor(FL_CURSOR_WAIT);
Fl::flush();

command += action + " " + device_name;
int results = system(command.c_str());

window->cursor(FL_CURSOR_DEFAULT);            
Fl::flush();

if ( results != 0 )
{
   fl_message("Error occured.\nMake sure you are using a valid backup/restore device. Some errors are logged in /tmp/backup_status");
   return;
} else
   exit(0);
}

Fl_Double_Window *window=(Fl_Double_Window *)0;

Fl_Input *input_device=(Fl_Input *)0;

Fl_Choice *filetool_choice=(Fl_Choice *)0;

Fl_Menu_Item menu_filetool_choice[] = {
 {gettext("None"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Backup"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Safe"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Restore"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Button *btn_go=(Fl_Button *)0;

int main(int argc, char **argv) {
  setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");
  { window = new Fl_Double_Window(225, 65, gettext("FileTool"));
    { input_device = new Fl_Input(65, 7, 150, 25, gettext("Device:"));
      input_device->callback((Fl_Callback*)input_callback);
      input_device->when(FL_WHEN_CHANGED);
    } // Fl_Input* input_device
    { filetool_choice = new Fl_Choice(65, 40, 80, 20, gettext("Action:"));
      filetool_choice->down_box(FL_BORDER_BOX);
      filetool_choice->deactivate();
      filetool_choice->menu(menu_filetool_choice);
    } // Fl_Choice* filetool_choice
    { btn_go = new Fl_Button(150, 40, 64, 20, gettext("GO"));
      btn_go->callback((Fl_Callback*)btn_callback, (void*)("go"));
      btn_go->deactivate();
    } // Fl_Button* btn_go
    window->end();
  } // Fl_Double_Window* window
  ifstream fin("/opt/.backup_device");                                  
getline(fin,device_name);                                        
fin.close();

if (device_name.size() != 0)
{
    input_device->value(device_name.c_str());
    filetool_choice->activate();
    filetool_choice->value(1);
    btn_go->activate();
}
  window->show(argc, argv);
  return Fl::run();
}
