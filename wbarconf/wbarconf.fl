# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2010} {} 

decl {// Zoom, Icon Size, Icon Text options - Brian Smith} {} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <sstream>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <locale.h>} {} 

decl {using namespace std;} {} 

decl {string home, tcedir, command, selected;} {} 

decl {int chosen,results;} {} 

decl {string onbootList, wbarXlist, options;} {} 

decl {string wbarIcons = "/usr/local/tce.icons";} {} 

Function {brw_wbar_callback(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {if (brw_wbar->value())
{
   chosen = brw_wbar->value();
   selected = brw_wbar->text(chosen);
   command = "wbar_mv_icon " + selected.substr(0,selected.length()-1) + " " + wbarIcons + " " + wbarXlist;
   system(command.c_str());
   brw_wbarXlist->add(selected.c_str());
   brw_wbar->remove(chosen);
//   command = "wbar.sh";
//   system(command.c_str());
}} {}
} 

Function {brw_wbarXlist_callback(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {if (brw_wbarXlist->value())
{
   chosen = brw_wbarXlist->value();
   selected = brw_wbarXlist->text(chosen);
   command = "wbar_mv_icon " + selected.substr(0,selected.length()-1) + " " + wbarXlist + " " + wbarIcons;
   system(command.c_str());
   brw_wbarXlist->remove(chosen);
   brw_wbar->add(selected.c_str());
//   command = "wbar.sh";
//   system(command.c_str());
}} {}
} 

Function {btnApplyCB(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {options = "-bpress ";
int pos = posChoice->value();
switch(pos)
{
   case 0  : options += "-p top";
             break;;
   case 1  : options += "-p bottom";
             break;;
   case 2  : options += "-p left -vbar";
             break;;
   case 3  : options += "-p right -vbar";
             break;;
   case 4  : options =+ "-p top-left";
             break;;
   case 5  : options =+ "-p top-right";
             break;;
   case 6  : options =+ "-p bot-left";
             break;;
   case 7  : options =+ "-p bot-right";
             break;;
   case 8  : options =+ "-p top-left -vbar";
             break;;
   case 9  : options =+ "-p bot-left -vbar";
             break;;
   case 10 : options =+ "-p top-right -vbar";
             break;;
   case 11 : options =+ "-p bot-right -vbar";
             break;;
   default : options += "-p bottom";
             break;;
}
double zoomf_value = zoomChoice->value();
if (zoomf_value == 1) {zoomf_value = 1.00001;}
string zoomf;
ostringstream stream;
stream << (double)zoomf_value;
zoomf = stream.str();
options += " -zoomf " + zoomf;

stream.str("");
string isize;
stream << (double)isizeChoice->value();
isize = stream.str();
options += " -isize " + isize;

if (textChoice->value() == 0) {options += " -nofont";}


string fname = home + "/.wbar";
ofstream fout(fname.c_str(), ios::out|ios::out);
if (! fout.is_open())
{
   cerr << "Can't open .wbar for output." << endl;
   exit(EXIT_FAILURE);
}
fout << options << endl;
fout.close();

command = "wbar.sh";
system(command.c_str());} {selected
  }
} 

Function {} {open
} {
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");} {}
  Fl_Window window {
    label {eXclude Wbar Icons} open
    xywh {86 140 420 385} type Double hide resizable
  } {
    Fl_Browser brw_wbar {
      label {Wbar Icons}
      callback brw_wbar_callback
      xywh {5 20 200 265} type Select align 1 textfont 4
    }
    Fl_Browser brw_wbarXlist {
      label {eXcluded Items}
      callback brw_wbarXlist_callback
      xywh {215 20 200 265} type Select align 1 textfont 4
    }
    Fl_Choice posChoice {
      label Position
      xywh {65 290 125 20} down_box BORDER_BOX
      code0 {posChoice->value(1);}
    } {
      MenuItem {} {
        label Top
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label Bottom
        xywh {10 10 30 20}
      }
      MenuItem {} {
        label Left
        xywh {20 20 30 20}
      }
      MenuItem {} {
        label Right
        xywh {30 30 30 20}
      }
      MenuItem {} {
        label {Top Left}
        xywh {40 40 30 20}
      }
      MenuItem {} {
        label {Top Right}
        xywh {50 50 30 20}
      }
      MenuItem {} {
        label {Bottom Left}
        xywh {60 60 30 20}
      }
      MenuItem {} {
        label {Bottom Right}
        xywh {70 70 30 20}
      }
      MenuItem {} {
        label {Left Top}
        xywh {80 80 30 20}
      }
      MenuItem {} {
        label {Left Bottom}
        xywh {90 90 30 20}
      }
      MenuItem {} {
        label {Right Top}
        xywh {100 100 30 20}
      }
      MenuItem {} {
        label {Right Bottom}
        xywh {110 110 30 20}
      }
    }
    Fl_Button {} {
      label Apply
      callback btnApplyCB
      xywh {165 350 80 25}
    }
    Fl_Slider zoomChoice {
      label {Wbar Zoom}
      xywh {305 320 105 20} type Horizontal align 4 minimum 1 maximum 3 step 0.1 value 2
    }
    Fl_Slider isizeChoice {
      label {Wbar Icon Size}
      xywh {305 290 105 20} type Horizontal align 4 minimum 10 maximum 80 step 1 value 32
    }
    Fl_Check_Button textChoice {
      label {Wbar Text Labels}
      xywh {165 320 25 20} down_box DOWN_BOX align 4
    }
  }
  code {FILE* run = popen("zoomf=`cat ~/.wbar` && zoomf=${zoomf\#\#*zoomf} && echo $zoomf | awk '{print $1}'", "r");
char b[10];
fscanf(run, "%s", b);
pclose(run);
double zoomf = atof(b);
if (zoomf == 0) { zoomf = 2.0; }
zoomChoice->value(zoomf);

run = popen("isize=`cat ~/.wbar` && isize=${isize\#\#*isize} && echo $isize | awk '{print $1}'", "r");
char b2[10];
fscanf(run, "%s", b2);
pclose(run);
double isize = atof(b2);
if (isize == 0) { isize = 32.0; }
isizeChoice->value(isize);

int rc = system("cat ~/.wbar | grep nofont >/dev/null 2>&1");
if (rc == 0){ textChoice->value(0);} else {textChoice->value(1);}

home = getenv("HOME");
ifstream tcedir_file("/opt/.tce_dir");
getline(tcedir_file,tcedir);
tcedir_file.close();
wbarXlist = tcedir + "/xwbar.lst";

command = "awk '/t: /{if (NR>4)print $2}' < " + wbarIcons;
FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *) calloc(PATH_MAX,sizeof(char));

if (pipe) {
  brw_wbar->clear();
  while (fgets(mbuf,PATH_MAX,pipe)) {
     string line(mbuf);
     brw_wbar->add(line.c_str());
     Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}

command = "awk '/t: /{print $2}' < " + wbarXlist + " 2>/dev/null";
pipe = popen(command.c_str(),"r");
mbuf = (char *) calloc(PATH_MAX,sizeof(char));

if (pipe) {
  brw_wbarXlist->clear();
  while (fgets(mbuf,PATH_MAX,pipe)) {
     string line(mbuf);
     brw_wbarXlist->add(line.c_str());
     Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}} {}
} 
