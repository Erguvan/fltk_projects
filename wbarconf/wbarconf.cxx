// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "wbarconf.h"
// (c) Robert Shingledecker 2010
#include <iostream>
#include <fstream>
#include <string>
#include <FL/fl_message.H>
#include <FL/Fl_File_Chooser.H>
#include <locale.h>
using namespace std;
static string home, tcedir, command, selected; 
static int chosen,results; 
static string onbootList, wbarXlist, options; 
static string wbarIcons = "/usr/local/tce.icons"; 

void brw_wbar_callback(Fl_Widget *, void *) {
  if (brw_wbar->value())
{
   chosen = brw_wbar->value();
   selected = brw_wbar->text(chosen);
   command = "wbar_mv_icon " + selected.substr(0,selected.length()-1) + " " + wbarIcons + " " + wbarXlist;
   system(command.c_str());
   brw_wbarXlist->add(selected.c_str());
   brw_wbar->remove(chosen);
//   command = "wbar.sh";
//   system(command.c_str());
}
}

void brw_wbarXlist_callback(Fl_Widget *, void *) {
  if (brw_wbarXlist->value())
{
   chosen = brw_wbarXlist->value();
   selected = brw_wbarXlist->text(chosen);
   command = "wbar_mv_icon " + selected.substr(0,selected.length()-1) + " " + wbarXlist + " " + wbarIcons;
   system(command.c_str());
   brw_wbarXlist->remove(chosen);
   brw_wbar->add(selected.c_str());
//   command = "wbar.sh";
//   system(command.c_str());
}
}

void btnApplyCB(Fl_Widget *, void *) {
  options = "-bpress ";
int pos = posChoice->value();
switch(pos)
{
   case 0  : options += "-p top";
             break;;
   case 1  : options += "-p bottom";
             break;;
   case 2  : options += "-p left -vbar";
             break;;
   case 3  : options += "-p right -vbar";
             break;;
   default : options += "-p bottom";
             break;;
}
string fname = home + "/.wbar";
ofstream fout(fname.c_str(), ios::out|ios::out);
if (! fout.is_open())
{
   cerr << "Can't open .wbar for output." << endl;
   exit(EXIT_FAILURE);
}
fout << options << endl;
fout.close();

command = "wbar.sh";
system(command.c_str());
}

Fl_Double_Window *window=(Fl_Double_Window *)0;

Fl_Browser *brw_wbar=(Fl_Browser *)0;

Fl_Browser *brw_wbarXlist=(Fl_Browser *)0;

Fl_Choice *posChoice=(Fl_Choice *)0;

Fl_Menu_Item menu_posChoice[] = {
 {gettext("Top"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Bottom"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Left"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Right"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

int main(int argc, char **argv) {
  setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");
  { window = new Fl_Double_Window(420, 315, gettext("eXclude Wbar Icons"));
    { brw_wbar = new Fl_Browser(5, 20, 200, 265, gettext("Wbar Icons"));
      brw_wbar->type(1);
      brw_wbar->textfont(4);
      brw_wbar->callback((Fl_Callback*)brw_wbar_callback);
      brw_wbar->align(FL_ALIGN_TOP);
    } // Fl_Browser* brw_wbar
    { brw_wbarXlist = new Fl_Browser(215, 20, 200, 265, gettext("eXcluded Items"));
      brw_wbarXlist->type(1);
      brw_wbarXlist->textfont(4);
      brw_wbarXlist->callback((Fl_Callback*)brw_wbarXlist_callback);
      brw_wbarXlist->align(FL_ALIGN_TOP);
    } // Fl_Browser* brw_wbarXlist
    { posChoice = new Fl_Choice(100, 290, 85, 20, gettext("Wbar Position"));
      posChoice->down_box(FL_BORDER_BOX);
      posChoice->menu(menu_posChoice);
      posChoice->value(1);
    } // Fl_Choice* posChoice
    { Fl_Button* o = new Fl_Button(330, 290, 64, 20, gettext("Apply"));
      o->callback((Fl_Callback*)btnApplyCB);
    } // Fl_Button* o
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
  home = getenv("HOME");
ifstream tcedir_file("/opt/.tce_dir");
getline(tcedir_file,tcedir);
tcedir_file.close();
wbarXlist = tcedir + "/xwbar.lst";

command = "awk '/t: /{if (NR>4)print $2}' < " + wbarIcons;
FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *) calloc(PATH_MAX,sizeof(char));

if (pipe) {
  brw_wbar->clear();
  while (fgets(mbuf,PATH_MAX,pipe)) {
     string line(mbuf);
     brw_wbar->add(line.c_str());
     Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}

command = "awk '/t: /{print $2}' < " + wbarXlist + " 2>/dev/null";
pipe = popen(command.c_str(),"r");
mbuf = (char *) calloc(PATH_MAX,sizeof(char));

if (pipe) {
  brw_wbarXlist->clear();
  while (fgets(mbuf,PATH_MAX,pipe)) {
     string line(mbuf);
     brw_wbarXlist->add(line.c_str());
     Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}
  window->show(argc, argv);
  return Fl::run();
}
