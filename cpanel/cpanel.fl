# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008} {} 

decl {\#include <iostream>} {} 

decl {using namespace std;} {} 

decl {string home;} {} 

Function {btn_callback(Fl_Widget* w, void* userdata)} {open return_type {static void}
} {
  code {Fl_Button* bp = (Fl_Button*)w;
if (userdata == "tftpd"){
  if(bp->box() == FL_DOWN_BOX){
    system("sudo pkill udpsvd");
    bp->box(FL_UP_BOX);
  } else {
    bp->box(FL_DOWN_BOX);
    string command = "sudo /sbin/udpsvd -E 0 69 tftpd " + home + " &";
    system(command.c_str());
  }
} else if (userdata == "ssh"){
  if(bp->box() == FL_DOWN_BOX){
    system("sudo /etc/init.d/dropbear stop");
    bp->box(FL_UP_BOX);
  } else {
    bp->box(FL_DOWN_BOX);
    system("sudo /etc/init.d/dropbear start");
  }
} else if (userdata == "udhcpc") {
  if(bp->box() == FL_DOWN_BOX){
    system("sudo pkill udhcpc");
    bp->box(FL_UP_BOX);
  } else {
    bp->box(FL_DOWN_BOX);
    system("sudo /sbin/udhcpc -b -i eth0");
  }
} else if (userdata == "crond") {
  if(bp->box() == FL_DOWN_BOX){
    system("sudo pkill crond");
    bp->box(FL_UP_BOX);
  } else {
    bp->box(FL_DOWN_BOX);
    system("sudo crond");
  }
} else {
  system((const char*)userdata);
}} {selected
  }
} 

Function {} {open
} {
  Fl_Window {} {open
    xywh {38 388 530 170} type Double hide
  } {
    Fl_Button {} {
      label {Backup/Restore}
      user_data {"filetool &"}
      callback btn_callback
      xywh {10 10 120 30}
    }
    Fl_Button {} {
      label {Date/Time}
      user_data {"datetool &"}
      callback btn_callback
      xywh {10 50 120 30}
    }
    Fl_Button {} {
      label {Floppy Tool}
      user_data {"fdtool&"}
      callback btn_callback
      xywh {10 90 120 30}
    }
    Fl_Button {} {
      label Help
      user_data {"help &"}
      callback btn_callback
      xywh {10 130 120 30}
    }
    Fl_Button {} {
      label Netcardconfig
      user_data {"sudo netcardconf &"}
      callback btn_callback
      xywh {140 10 120 30}
    }
    Fl_Button {} {
      label Backgrounds
      user_data {"wallpaper &"}
      callback btn_callback
      xywh {140 50 120 30}
    }
    Fl_Button {} {
      label {Theme Tool}
      user_data {"settheme &"}
      callback btn_callback
      xywh {140 90 120 30}
    }
    Fl_Button {} {
      label {Mouse Tool}
      user_data {"mousetool &"}
      callback btn_callback
      xywh {140 130 120 30}
    }
    Fl_Button {} {
      label {Mount Tool}
      user_data {"mnttool &"}
      callback btn_callback
      xywh {270 10 120 30}
    }
    Fl_Button {} {
      label {Swapfile Tool}
      user_data {"swapfile &"}
      callback btn_callback
      xywh {270 50 120 30}
    }
    Fl_Button {} {
      label {Select Mirror}
      user_data {"tcemirror &"}
      callback btn_callback
      xywh {270 90 120 30}
    }
    Fl_Button {} {
      label {System Stats}
      user_data {"stats &"}
      callback btn_callback
      xywh {270 130 120 30}
    }
    Fl_Light_Button tftpd {
      label {TFTP Server}
      user_data {"tftpd"}
      callback btn_callback
      xywh {400 10 120 30} selection_color 2
    }
    Fl_Light_Button ssh {
      label {SSH Server}
      user_data {"ssh"}
      callback btn_callback
      xywh {400 50 120 30} color 29 selection_color 2
    }
    Fl_Light_Button dhcpc {
      label {DHCP Client}
      user_data {"udhcpc"}
      callback btn_callback
      xywh {400 90 120 30} selection_color 2
    }
    Fl_Light_Button crond {
      label {Cron Daemon}
      user_data {"crond"}
      callback btn_callback
      xywh {400 130 120 30} selection_color 2
    }
  }
  code {FILE *CMD_fp = NULL;
if ((CMD_fp = popen("env | awk -F'=' /HOME/'{printf \\"%s\\",$2}'","r"))==NULL)
{
   cout << "popen failed" << endl;
   return 1;
}
char result[1024];
if ( fgets(result,1023,CMD_fp)==NULL)     // If no result from above then default is to backup.
   home = "/home/tc";
else    
   home = result;     

if (system("pidof udpsvd > /dev/null") == 0)
{
   tftpd->box(FL_DOWN_BOX);
   tftpd->value(true);
} else
   tftpd->box(FL_UP_BOX); 

if (system("pidof dropbear >/dev/null") == 0)
{
   ssh->box(FL_DOWN_BOX);
   ssh->value(true);
} else
   ssh->box(FL_UP_BOX);
  
if (system("pidof udhcpc >/dev/null") == 0)
{
   dhcpc->value(true);
   dhcpc->box(FL_DOWN_BOX);
} else
   dhcpc->box(FL_UP_BOX);
   
if (system("pidof crond >/dev/null") == 0)
{
   crond->box(FL_DOWN_BOX);
   crond->value(true);
} else
   crond->box(FL_UP_BOX);} {}
} 
