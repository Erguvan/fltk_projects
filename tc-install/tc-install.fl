# data file for the Fltk User Interface Designer (fluid)
version 1.0303
i18n_type 1
i18n_include <libintl.h>
i18n_function mygettext
header_name {.h}
code_name {.cxx}
decl {// (c) Robert Shingledecker 2011} {}

decl {// Portions (c) Brian Smith 2011} {}

decl {\#include <unistd.h>} {public global
}

decl {\#include <cstdlib>} {}

decl {\#include <iostream>} {}

decl {\#include <fstream>} {}

decl {\#include <sstream>} {}

decl {\#include <string>} {}

decl {\#include <FL/Fl_File_Chooser.H>} {}

decl {\#include <FL/fl_message.H>} {}

decl {\#include <locale.h>} {}

decl {using namespace std;} {}

decl {istringstream iss;} {}

decl {string command,msg,heading;} {}

decl {int results, locales_set=0, test4syslinux, test4mkdosfs, test4perl;} {}

decl {string image,type,installMode, target,dev,format,path,coreplus,boot,flag, markActive,tcepath;} {}

decl {string warn="Mark active if Tiny Core is the only operation system,\\nor Windows and Tiny Core are on the same disk.\\nOtherwise use Grub extension after installation.";} {}

Function {selectFile()} {return_type void
} {
  code {brwTarget->deactivate();
string target = "*core,corepure64*";
string title = gettext("Select File for ");
title = title + "core,corepure64";
Fl_File_Chooser chooser("/",target.c_str(), Fl_File_Chooser::SINGLE, title.c_str());
chooser.show();
while(chooser.shown())
  { Fl::wait(); }

if ( chooser.value() == NULL )
{
   return;
}

path = chooser.value();
Fl::flush();} {}
}

Function {prepTarget()} {return_type void
} {
  code {if (path.empty()) return;

btnActive->deactivate();
btnBootloader->deactivate();
if ( installMode =="hdd" || installMode == "zip")
{
   test4mkdosfs = system("which mkdosfs >/dev/null");

   if ( test4mkdosfs != 0 )
   {
      fl_message("HDD and ZIP require dosfstools extension be loaded!\\nZIP also requires perl extension.");
      exit(1);
   }

   if ( installMode == "zip")
   {
      test4perl = system("which perl >/dev/null");
      if ( test4perl != 0 )
      {
         fl_message("ZIP installation requires perl extension be loaded.");
         exit(1);
      }
   }

   btnWhole->value(1);
   btnPartition->value(0);
   btnPartition->deactivate();
   type = "disk";
} else {
   btnPartition->activate();
}

heading = "   Select " + type + " for " + image + "   "; // Add empty spaces to prevent glitches
brwTarget->label(heading.c_str());

flag = "x";
if ( type == "disk" )
   flag = "-d";
if (type == "partition" )
   flag = "-p";

if (! image.empty() && flag != "x")
{
    brwTarget->activate();
    command = "fetch_devices " + flag + " > /tmp/install_work";
    system(command.c_str());
    brwTarget->load("/tmp/install_work");
    unlink("/tmp/install_work");
}
grpButtons->deactivate();} {}
}

Function {cursor_normal()} {return_type void
} {
  code {window->cursor(FL_CURSOR_DEFAULT);
Fl::flush();} {}
}

Function {cursor_wait()} {return_type void
} {
  code {window->cursor(FL_CURSOR_WAIT);
Fl::flush();} {}
}

Function {mygettext(const char *msgid)} {private return_type {char *}
} {
  code {if (!locales_set) {

setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");

locales_set=1;

}

return gettext(msgid);} {}
}

Function {btnCB(Fl_Widget*, void*userdata)} {return_type {static void}
} {
  code {const string userdatastr = userdata ? (char *) userdata : "";

/*if ( userdatastr == "begin" )
{
  wWizard->value(wWizard->child(0));
} */

if ( userdatastr == "next" )
{
  if ( grpBoot->visible() ){
   	string command = "grep 'Core Plus' `dirname " + path + "`/isolinux/isolinux.cfg >/dev/null 2>&1";
   	int results = system(command.c_str());
   	if (results == 0){
   	     coreplus = "yes";
   	     wWizard->value(grpExtensionsCorePlus);
   	}else{
   	     coreplus = "no";
   	     wWizard->value(grpExtensionsStandAlone);
   	}
  }else if (grpExtensionsCorePlus->visible() ){
        wWizard->value(grpReview);
  }else{
	  wWizard->next();
	  if ( grpFormat->visible() && installMode == "zip")
	     wWizard->next();

	  if ( btnWhole->value() == 1 ){
	     btnNoFormat->deactivate();
	     btnNoFormat->value(0);
	  }else{
	     btnNoFormat->activate();
	  }

	  if (btnNoFormat->value() == 0 && btnExt2Format->value() == 0 && btnExt3Format->value() == 0 && btnExt4Format->value() == 0 && btnVfatFormat->value() == 0){
             btnExt4Format->value(1);
             format = "ext4";
          }

  }
}

if ( userdatastr == "prev" )
{
  if (grpExtensionsStandAlone->visible() ) {
  	wWizard->value(grpBoot);
  }else if (grpReview->visible() ){
   	string command = "grep 'Core Plus' `dirname " + path + "`/isolinux/isolinux.cfg >/dev/null 2>&1";
   	int results = system(command.c_str());
   	if (results == 0){
   	     wWizard->value(grpExtensionsCorePlus);
   	}else{
   	     wWizard->value(grpExtensionsStandAlone);
   	}
  }else{
	  wWizard->prev();
	  if ( grpFormat->visible() && installMode == "zip")
	     wWizard->prev();
  }
}

/*if ( userdatastr == "last" )
{
  int last = wWizard->children()-1;
  wWizard->value(wWizard->child(last));
}*/

if (grpType->visible())
   prepTarget();

if (grpBoot->visible())
{
   /*if ( installMode =="hdd" || installMode == "zip")
      options->value("waitusb=5");*/

   brwBootRef->load("/usr/share/doc/tc/bootOptions.txt");
}

if (grpReview->visible())
{
   markActive="0";
   boot = options->value();
   brwReview->clear();
   brwReview->add(("Source: "+path).c_str());
   brwReview->add(("Type: "+installMode).c_str());
   brwReview->add(("Target: "+dev).c_str());
   if (btnActive->value() == 1)
   {
      brwReview->add("Mark partition active (bootable)");
      markActive="1";
   }
   if ( installMode != "zip" )
      brwReview->add(("Format:"+format).c_str());
   brwReview->add(("Options: "+boot).c_str());

   if (coreplus == "yes"){
   	if (installCoreX11->value() == 1) {brwReview->add("Install X GUI");}
 	if (installCoreOnly->value() == 1) {brwReview->add("Install Core Only (text mode)");}
 	if (btnWifi->value() == 1) {brwReview->add("Install Wifi Support");}
 	if (btnNdiswrapper->value() == 1) {brwReview->add("Install ndiswrapper");}
 	if (btnWifiFirmware->value() == 1) {brwReview->add("Install Wireless Firmware");}
 	if (btnInstaller->value() == 1) {brwReview->add("Install Installer Application");}
 	if (btnRemaster->value() == 1) {brwReview->add("Install Remaster Tool");}
 	if (btnKmaps->value() == 1) {brwReview->add("Install Support for Non-US keyboard maps");}
   }else{
   	if (! tcepath.empty()) {brwReview->add(("Install TCE/CDE Dircetory: "+tcepath).c_str());}
   }
}} {}
}

Function {brwCB(Fl_Widget*, void*userdata)} {open return_type {static void}
} {
  code {if ( brwTarget->value() )
{
   dev = brwTarget->text(brwTarget->value());
   dev = dev.substr(0,dev.find("\\t",0));
   int partitionNbr;
   iss.str(dev.substr(3,dev.length()));
   iss >> partitionNbr;
   grpButtons->activate();
   if (btnPartition->value() == 1  && partitionNbr < 5)
      btnActive->activate();
   if (installMode == "frugal")
   	btnBootloader->activate();
   else
   	btnBootloader->value(1);
}} {selected
  }
}

Function {btnProceedCB(Fl_Widget*, void* userdata)} {return_type {static void}
} {
  code {btnProceed->deactivate();
grpButtons->deactivate();
cursor_wait();

string coreplusinstalltype;
if (installCoreX11->value() == 1) {
	coreplusinstalltype = "X";
}else{
	coreplusinstalltype = "Core";
}

string installgroups = "";
if (btnWifi->value() == 1){
    installgroups = installgroups + ",wifi";
}
if (btnNdiswrapper->value() == 1){
    installgroups = installgroups + ",ndiswrapper";
}
if (btnWifiFirmware->value() == 1){
    installgroups = installgroups + ",wififirmware";
}
if (btnInstaller->value() == 1){
    installgroups = installgroups + ",installer";
}
if (btnRemaster->value() == 1){
    installgroups = installgroups + ",remaster";
}
if (btnKmaps->value() == 1){
    installgroups = installgroups + ",kmaps";
}
if (installgroups.empty()) {installgroups = "none";}

string bootLoader = "no";
if (btnBootloader->value() == 1) { bootLoader = "yes"; }

string tcedir = outputTCEDir->value();
if (tcedir.empty()) { tcedir = "none"; }
if (btnNoExtensions->value() == 1) { tcedir = "none"; }

command="sudo tc-install.sh "+path+" "+installMode+" "+dev+" "+markActive+" "+format+" "+bootLoader+" "+coreplus+" "+coreplusinstalltype+" "+installgroups+" "+tcedir+" "+boot;
FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
if (pipe)
{
   brwReview->clear();
   while(fgets(mbuf,PATH_MAX,pipe))
   {
      string line(mbuf);
      brwReview->add(line.c_str());
      Fl::flush();
      brwReview->bottomline(brwReview->size());
   }
   pclose(pipe);
   free(mbuf);
}
cursor_normal();
Fl::flush();} {}
}

Function {} {open
} {
  Fl_Window window {
    label {Tiny Core Installation}
    user_data {"quit"} open
    xywh {34 216 480 400} type Double hide resizable
  } {
    Fl_Wizard wWizard {
      label {Tiny Core Installation} open
      xywh {25 30 435 325} labeltype ENGRAVED_LABEL
      code0 {wWizard->value(wWizard->child(0));}
    } {
      Fl_Group grpType {open
        xywh {25 30 435 325}
      } {
        Fl_Box lblPathCore {
          label {Path to core.gz:}
          xywh {55 38 105 25}
        }
        Fl_Output fullpathOutput {
          user_data {"core"}
          callback {image = (const char*)v;
selectFile();
fullpathOutput->value(path.c_str());
prepTarget();}
          xywh {55 63 375 27}
        }
        Fl_Group {} {open
          xywh {55 104 375 25}
        } {
          Fl_Check_Button {} {
            label Frugal
            user_data {"frugal"}
            callback {installMode = (const char*)v;
prepTarget();}
            tooltip {Use for frugal hard drive installations} xywh {80 105 70 22} type Radio down_box DOWN_BOX value 1
            code0 {installMode = "frugal";}
          }
          Fl_Check_Button {} {
            label {USB-HDD}
            user_data {"hdd"}
            callback {installMode = (const char*)v;
prepTarget();}
            tooltip {Use for pendrives.   Your BIOS must support USB-HDD booting} xywh {195 105 90 22} type Radio down_box DOWN_BOX
          }
          Fl_Check_Button {} {
            label {USB-ZIP}
            user_data {"zip"}
            callback {installMode = (const char*)v;
prepTarget();}
            tooltip {Use for pendrives.   Drive will be formatted into two FAT partitions} xywh {315 105 80 22} type Radio down_box DOWN_BOX
          }
        }
        Fl_Group {} {
          xywh {55 131 375 33} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btnWhole {
            label {Whole Disk}
            user_data {"disk"}
            callback {if (btnWhole->value() == 1 )
{
    type = (const char*)v;
    prepTarget();
}}
            xywh {80 136 125 25} type Radio down_box DOWN_BOX
          }
          Fl_Check_Button btnPartition {
            label {Existing Partition}
            user_data {"partition"}
            callback {if (btnPartition->value() == 1)
{
type = (const char*)v;
prepTarget();
}}
            xywh {265 136 130 25} type Radio down_box DOWN_BOX
            code0 {//type = "partition";}
          }
        }
        Fl_Browser brwTarget {
          label {Select Target Disk}
          callback brwCB
          xywh {55 189 375 100} type Hold align 1 deactivate
        }
        Fl_Check_Button btnActive {
          label {Mark Partition Active (bootable)}
          callback {if (btnActive->value() == 1)
{
   fl_message(warn.c_str());
}}
          xywh {130 293 230 24} down_box DOWN_BOX deactivate
        }
        Fl_Check_Button btnBootloader {
          label {Install boot loader}
          xywh {130 318 230 24} down_box DOWN_BOX deactivate
          code0 {btnBootloader->value(1);}
        }
      }
      Fl_Group grpFormat {open
        xywh {25 30 435 325} hide
      } {
        Fl_Group FormatType {
          label {Formatting Options}
          xywh {100 95 270 230}
        } {
          Fl_Round_Button btnNoFormat {
            label {No formatting, use existing.}
            user_data {"none"}
            callback {format = (const char*)v;}
            xywh {140 105 195 20} type Radio down_box ROUND_DOWN_BOX value 1
            code0 {format = "none";}
          }
          Fl_Round_Button btnExt2Format {
            label ext2
            user_data {"ext2"}
            callback {format = (const char*)v;}
            xywh {140 125 195 20} type Radio down_box ROUND_DOWN_BOX
          }
          Fl_Round_Button btnExt3Format {
            label ext3
            user_data {"ext3"}
            callback {format = (const char*)v;}
            xywh {140 145 195 20} type Radio down_box ROUND_DOWN_BOX
          }
          Fl_Round_Button btnExt4Format {
            label ext4
            user_data {"ext4"}
            callback {format = (const char*)v;}
            xywh {140 165 195 20} type Radio down_box ROUND_DOWN_BOX
          }
          Fl_Round_Button btnVfatFormat {
            label vfat
            user_data {"vfat"}
            callback {format = (const char*)v;}
            xywh {140 185 195 20} type Radio down_box ROUND_DOWN_BOX
          }
        }
      }
      Fl_Group grpBoot {
        label {Boot Options}
        xywh {25 30 435 325} hide
      } {
        Fl_Browser brwBootRef {
          label {Boot Options Reference List}
          xywh {35 55 415 235} align 1 textfont 4
        }
        Fl_Input options {
          label {Enter Spaces Separated Options From Examples Above.
These can be edited later on via your bootloader config.}
          xywh {35 325 415 20} labeltype EMBOSSED_LABEL align 1
        }
      }
      Fl_Group grpExtensionsCorePlus {
        xywh {50 55 370 285} hide
      } {
        Fl_Group installType {
          label {Install Type}
          xywh {85 70 310 75}
        } {
          Fl_Round_Button installCoreX11 {
            label {Core and X/GUI Desktop}
            xywh {138 75 238 20} type Radio down_box ROUND_DOWN_BOX
            code0 {installCoreX11->value(1);}
          }
          Fl_Round_Button installCoreOnly {
            label {Core Only (Text Based Interface)}
            xywh {138 95 238 20} type Radio down_box ROUND_DOWN_BOX
          }
        }
        Fl_Group corePlusExtensions {
          label {Core Plus Extensions Catagories to Install}
          xywh {83 155 315 180}
        } {
          Fl_Box {} {
            label {Wireless }
            xywh {101 160 290 80} box DOWN_BOX align 21
          }
          Fl_Check_Button btnWifi {
            label {Wifi Support}
            xywh {151 174 238 25} down_box DOWN_BOX
          }
          Fl_Check_Button btnNdiswrapper {
            label ndiswrapper
            xywh {151 194 238 25} down_box DOWN_BOX
          }
          Fl_Check_Button btnWifiFirmware {
            label {Wireless Firmware}
            xywh {151 214 238 25} down_box DOWN_BOX
          }
          Fl_Box {} {
            label Other
            xywh {101 245 290 80} box DOWN_FRAME align 21
          }
          Fl_Check_Button btnInstaller {
            label {Installer Application}
            xywh {151 258 238 25} down_box DOWN_BOX
          }
          Fl_Check_Button btnRemaster {
            label {Remaster Tool}
            xywh {151 278 238 25} down_box DOWN_BOX
          }
          Fl_Check_Button btnKmaps {
            label {Non-US keyboard layout support}
            xywh {151 298 238 25} down_box DOWN_BOX
          }
        }
      }
      Fl_Group grpExtensionsStandAlone {
        xywh {36 61 405 255} hide
      } {
        Fl_Group {} {
          label {Extension Installation}
          xywh {52 111 389 205}
        } {
          Fl_Round_Button btnInstallExtensions {
            label {Install Extensions from this TCE/CDE Directory:}
            callback {outputTCEDir->activate();}
            xywh {54 136 382 25} type Radio down_box ROUND_DOWN_BOX
            code0 {btnInstallExtensions->value(1);}
          }
          Fl_Round_Button btnNoExtensions {
            label {Don't install Extensions (Core Only, Text Based Install)}
            callback {outputTCEDir->deactivate();}
            xywh {54 215 382 25} type Radio down_box ROUND_DOWN_BOX
          }
          Fl_Output outputTCEDir {
            user_data {"tce"}
            callback {image = (const char*)v;

string target = "*";
string title = gettext("Select TCE/CDE Directory");
Fl_File_Chooser chooserTCE("/",target.c_str(), Fl_File_Chooser::DIRECTORY, title.c_str());
chooserTCE.show();
while(chooserTCE.shown())
  { Fl::wait(); }

if ( chooserTCE.value() == NULL )
{
   return;
}

tcepath = chooserTCE.value();
Fl::flush();

outputTCEDir->value(tcepath.c_str());}
            xywh {66 159 375 27}
          }
        }
      }
      Fl_Group grpReview {
        xywh {25 30 435 325} hide
      } {
        Fl_Browser brwReview {
          label Review
          xywh {45 55 390 245} align 1
        }
        Fl_Button btnProceed {
          label Proceed
          callback btnProceedCB
          xywh {210 315 64 20}
        }
      }
    }
    Fl_Group grpButtons {open
      xywh {25 365 440 25} deactivate
    } {
      Fl_Button {} {
        label {@<}
        user_data {"prev"}
        callback btnCB
        xywh {180 365 45 25}
      }
      Fl_Button {} {
        label {@>}
        user_data {"next"}
        callback btnCB
        xywh {230 365 45 25}
      }
    }
  }
  code {/*
test4syslinux = system("which syslinux >/dev/null");
if ( test4syslinux != 0 )
{
   fl_message("tc-install requires syslinux extension to be loaded.\\nHDD (vfat) & ZIP installs require dosfstools.\\nZIP will also require perl.");
   exit(1);
}
*/

int cd_num;
int results;
char command_buff[36];
char path_buff[29];
char tce_path_buff[13];
for (cd_num = 0; cd_num < 10; cd_num++) {
  sprintf(command_buff, "[ -f /mnt/sr%d/boot/core.gz ]", cd_num);
  results = system(command_buff);
  if (results == 0){
    sprintf(path_buff, "/mnt/sr%d/boot/core.gz", cd_num);
    fullpathOutput->value(path_buff);
    path = path_buff;
    image = "core";
    break;
  } else {
    sprintf(command_buff, "[ -f /mnt/sr%d/boot/corepure64.gz ]", cd_num);
    results = system(command_buff);
    if (results == 0){
      sprintf(path_buff, "/mnt/sr%d/boot/corepure64.gz", cd_num);
      fullpathOutput->value(path_buff);
      path = path_buff;
      image = "corepure64";
      break;
    }
  }
}

if (cd_num != 10) {
  sprintf(command_buff, "[ -d /mnt/sr%d/cde ]", cd_num);
  results = system(command_buff);
  if (results == 0){
    sprintf(tce_path_buff, "/mnt/sr%d/cde", cd_num);
    outputTCEDir->value(tce_path_buff);
    tcepath = tce_path_buff;
  }
}

brwTarget->deactivate();
prepTarget();} {}
}
