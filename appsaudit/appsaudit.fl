# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function mygettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2009-2011} {selected
} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <locale.h>} {} 

decl {using namespace std;} {} 

decl {string tcedir, target_dir, desktop;} {} 

decl {string command;} {} 

decl {string select_extn, select_results;} {} 

decl {string option_type, report_type, update_type;} {} 

decl {ifstream ifaberr;} {} 

decl {string aberr, msg, hilite;} {} 

decl {int results, locales_set=0;} {} 

decl {string copy2fsList, copy2fsFlag, onbootList;} {} 

Function {cursor_normal()} {return_type void
} {
  code {window->cursor(FL_CURSOR_DEFAULT);
Fl::flush();} {}
} 

Function {cursor_wait()} {return_type void
} {
  code {window->cursor(FL_CURSOR_WAIT);
Fl::flush();} {}
} 

Function {menu_activate()} {return_type void
} {
  code {menuDepends->activate();
menuInstall->activate();
menuUpdates->activate();
menuMd5s->activate();
menuOnBoot->activate();
menuOnDemand->activate();
menuBar->redraw();} {}
} 

Function {menu_deactivate()} {return_type void
} {
  code {menuDepends->deactivate();
menuInstall->deactivate();
menuUpdates->deactivate();
menuMd5s->deactivate();
menuOnBoot->deactivate();
menuOnDemand->deactivate();
menuBar->redraw();} {}
} 

Function {mygettext(const char *msgid)} {private return_type {char *}
} {
  code {if (!locales_set) {

setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");

locales_set=1;

}

return gettext(msgid);} {}
} 

Function {depends_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {report_type = (const char*) userdata;
option_type = "";
menu_deactivate();
menuDepends->activate();

if (userdata == "updatedeps")
{
   cursor_wait();
   command = "/usr/bin/tce-audit updatedeps " + target_dir +"/";
   system(command.c_str());
   cursor_normal();
} else if (userdata == "builddb")
{
   cursor_wait();
   command = "/usr/bin/tce-audit builddb " + target_dir +"/";
   system(command.c_str());
   string listfile = target_dir + "/tce.lst";
   brw_extn->load(listfile.c_str());
   brw_extn->remove(brw_extn->size());
   brw_results->load("/tmp/audit_results.txt");
   brw_results->remove(brw_results->size());
   menu_nodepends->activate();
   menu_notrequired->activate();
   menu_auditall->activate();
   menu_marked->activate();
   menu_clearlst->activate();
// box_extn->label("Select");
   box_results->label("Results");
   cursor_normal();
} else if (userdata == "dependson" or userdata == "requiredby" or userdata == "audit") 
{
   report_type = (const char*) userdata;
   string loadit = "tce-audit " + report_type + " " + target_dir + "/" + select_extn;
   int results = system(loadit.c_str());
   if (results == 0 )
   {
      brw_results->load("/tmp/audit_results.txt");
      brw_results->remove(brw_results->size());
   } else {
      fl_message("error detected!");
   }
} else if (userdata == "auditall" or userdata == "nodepends" or userdata == "notrequired")
{
   box_results->label("Results");
   menu_delete->deactivate();
   menu_dependson->deactivate();
   menu_requiredby->deactivate();
   menu_missing->deactivate();
   command = "tce-audit " + report_type + " " + target_dir + "/";
   int results = system(command.c_str());
   if (results == 0 )
   {
      brw_results->load("/tmp/audit_results.txt");
      brw_results->remove(brw_results->size());
   } else {
      ifstream ifaberr("/tmp/aberr");
      msg = "Error: ";
      getline(ifaberr,aberr);
      while (ifaberr) 
      {
         msg = msg + aberr + "\\n";
         getline(ifaberr,aberr);
      }
      ifaberr.close();
      fl_message(msg.c_str());
   }
} else if (userdata == "delete")
{
   report_type = (const char*) userdata;
   command = "tce-audit " + report_type + " " + target_dir + "/" + select_extn;
   int results = system(command.c_str());
   if (results == 0 )
   {
      brw_results->load("/tmp/audit_results.txt");
      brw_results->remove(brw_results->size());
   } else {
      fl_message("error detected!");
   }
} else if (userdata == "display_marked")
{
     box_results->label("Results");
     brw_results->load("/tmp/audit_marked.lst");
     brw_results->remove(brw_results->size());
} else if (userdata == "clearlst")
{
     report_type = (const char*) userdata;
     command = "tce-audit " + report_type + " " + target_dir + "/" + select_extn;
     int results = system(command.c_str());
     if (results == 0 )
     { 
        brw_results->clear();
        box_results->label("Marked for deletion cleared");
     }
} else if (userdata == "exit_depends")
{
    menu_activate();
    brw_extn->clear();
    brw_results->clear();
}} {}
} 

Function {options_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {option_type = (const char*) userdata;
report_type = "";

menu_deactivate();
menuInstall->activate();

if (userdata == "default")
{
   command = "ls "+ copy2fsFlag + " >/dev/null 2>&1";
   int results = system(command.c_str());
   if (results == 0)
   {
     command = "rm -f "+ copy2fsFlag;
     system(command.c_str());
     box_results->label("copy2fs.flg removed.");
   } else
   {  
     command = "touch " + tcedir + "/copy2fs.flg";
     system(command.c_str());
     box_results->label("copy2fs.flg set");
   }
} else if (userdata == "select") 
{
// box_extn->label(target_dir.c_str());
   command = "ls " + target_dir + "|grep -E .tcz$ > tce.lst";
   system(command.c_str());
   brw_extn->load("tce.lst");
   brw_extn->remove(brw_extn->size());
   brw_results->load(copy2fsList.c_str());
   brw_results->remove(brw_results->size());
   box_results->label("Current copy2fs.lst");
} else if (userdata == "exit_copy")
{
    menu_activate();
    option_type = "";
    box_results->label("Results");
    brw_extn->clear();
    brw_results->clear();
}} {}
} 

Function {updates_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {report_type = (const char*) userdata;

if (report_type == "update") 
{
   menu_deactivate();
   menuUpdates->activate();
   brw_extn->hide();
   grp_updates->show();
   grp_updates->activate();
   brw_multi->clear();
   brw_results->clear();
   box_results->label("Results");
   Fl::flush();
   cursor_wait();
   command = "tce-update list " + target_dir + " > /tmp/apps_upd.lst";
   system(command.c_str());
   box_extn->label(target_dir.c_str());
   brw_multi->load("/tmp/apps_upd.lst");
   brw_multi->remove(brw_multi->size());
   cursor_normal();
   btn_multi->activate();
} else if (report_type == "exit_updates")
{
    menu_activate();
    grp_updates->hide();
    brw_extn->show();
    report_type = "";
    box_results->label("Results");
    brw_extn->clear();
    brw_results->clear();
}} {}
} 

Function {md5s_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {report_type = (const char*) userdata;

if (report_type == "md5s") 
{
   menu_deactivate();
   menuMd5s->activate();
   brw_extn->hide();
   grp_updates->show();
   grp_updates->activate();
   brw_multi->clear();
   brw_results->clear();
   box_results->label("Results");
   Fl::flush();
   cursor_wait();
   command = "cd " + target_dir + " && ls *.md5.txt > /tmp/apps_upd.lst";
   system(command.c_str());
   box_extn->label(target_dir.c_str());
   brw_multi->load("/tmp/apps_upd.lst");
   brw_multi->remove(brw_multi->size());
   cursor_normal();
   btn_multi->activate();
} else if (report_type == "exit_md5s")
{
    menu_activate();
    grp_updates->hide();
    brw_extn->show();
    report_type = "";
    box_results->label("Results");
    brw_extn->clear();
    brw_results->clear();
}} {}
} 

Function {onboot_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {if (userdata == "onboot" )
{
  menu_deactivate();
  menuOnBoot->activate();
  target_dir = tcedir + "/optional/";
  report_type = "onboot";
  brw_extn->clear();
  cursor_wait();
  
  command = "ondemand -l ";
  results = system(command.c_str());
  if (results == 0 ) {
     brw_extn->load("/tmp/ondemand.tmp");
     brw_extn->remove(brw_extn->size());
     unlink("/tmp/ondemand.tmp");
  }
  
  box_results->label("On Boot Items");
  brw_results->load(onbootList.c_str());
  brw_results->remove(brw_results->size());
  
  cursor_normal();
}
 
if (userdata == "exit_onboot")
{
  menu_activate();
  report_type.empty();
  box_results->label("Results");
  brw_extn->clear();
  brw_results->clear();
}} {}
} 

Function {ondemand_callback(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {if (userdata == "ondemand" )
{
  menu_deactivate();
  menuOnDemand->activate();
  report_type = "ondemand";
  brw_extn->clear();
  cursor_wait();
  command = "ondemand -l";
  system(command.c_str());
  
//box_extn->label("Select for OnDemand");
  brw_extn->load("/tmp/ondemand.tmp");
  brw_extn->remove(brw_extn->size());
  
  brw_results->clear();
  box_results->label("Current OnDemand Items");
  command = "ls -1 "+ tcedir + "/ondemand 2>/dev/null | grep -v \\".img$\\" | sort -f > /tmp/ondemand.tmp";
  results = system(command.c_str());
  if (results == 0 ) {
    brw_results->load("/tmp/ondemand.tmp");
    brw_results->remove(brw_results->size());
    unlink("/tmp/ondemand.tmp");
  }  
  cursor_normal();
}
 
if (userdata == "exit_ondemand")
{
  menu_activate();
  report_type.empty();
//box_extn->label(target_dir.c_str());
  box_results->label("Results");
  brw_extn->clear();
  brw_results->clear();
} 
 
if (userdata == "quit") 
  exit(0);} {}
} 

Function {brw_extn_callback(Fl_Widget *, void *)} {return_type {static void}
} {
  code {if (brw_extn->value())
{
   select_extn = brw_extn->text(brw_extn->value());
   bool not_duplicate = true;
   for ( int x=1; x <= brw_results->size(); x++ ) {
     if (!strcmp(brw_results->text(x),select_extn.c_str())) {
       not_duplicate = false;
     }
   }   
   if ( report_type.length() > 0 )
   {
     if ( not_duplicate ) { box_results->label(select_extn.c_str()); }
     menu_dependson->activate();
     menu_requiredby->activate();
     menu_missing->activate();
     menu_delete->activate();
     if ( not_duplicate ) { brw_results->load(""); }
   } 
   if ( option_type == "select" && not_duplicate )
   {
     command = "echo " + select_extn + " >> " + copy2fsList;
     system(command.c_str());
     brw_results->load(copy2fsList.c_str());
     brw_results->remove(brw_results->size());
   }
   if ( update_type == "update" )
   {
     cursor_wait();
     command = "tce-update update " + target_dir +"/" + select_extn + ".md5.txt >/tmp/apps_upd.lst";
     brw_results->load("");
     system(command.c_str());
     brw_results->load("/tmp/apps_upd.lst");
     brw_results->remove(brw_results->size());
     cursor_normal();
   }
   
   if ( report_type == "onboot" && not_duplicate )
   {
     command = "echo " + select_extn + " >> " + onbootList;
     system(command.c_str());
     brw_extn->remove(brw_extn->value());
     box_results->label("On Boot Items");
     brw_results->load(onbootList.c_str());
     brw_results->remove(brw_results->size());
   }
      
   if ( report_type == "ondemand" )
   {
     cursor_wait();
     box_results->label("Current OnDemand Items");
     command = "ondemand " + select_extn;
     brw_results->load("");
     results = system(command.c_str());
     if ( results == 0 ) 
     {
       command = "ls -1 " + tcedir + "/ondemand | grep -v \\".img$\\" | sort -f > /tmp/ondemand.tmp";
       results = system(command.c_str());
       if (results == 0 ) {
         brw_extn->remove(brw_extn->value());
         brw_results->load("/tmp/ondemand.tmp");
         brw_results->remove(brw_results->size());
       }
     } else { 
         brw_results->load("/tmp/ondemand.tmp");
         brw_results->remove(brw_results->size());
     }    
     cursor_normal();
   }
}} {}
} 

Function {btn_multi_callback(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {cursor_wait();
brw_results->clear();
for ( int t=0; t<=brw_multi->size(); t++ )
{
   if ( brw_multi->selected(t) )
   {
      select_extn = brw_multi->text(t);
      if ( report_type == "md5s" )
      {
         command = "cd " + target_dir +"/ && md5sum -c " + select_extn;
         results = system(command.c_str());
         if ( results == 0 ) {
            msg = " OK";
            hilite = "";
         } else {
            msg = " FAILED";
            hilite = "@B17";
         }   
             
         brw_results->add((hilite + select_extn + msg).c_str());
         Fl::flush();      
      
      } else {
         box_results->label(("Fetching " + select_extn).c_str());
         box_results->redraw();
         Fl::flush();

         command = "tce-update update " + target_dir +"/" + select_extn + ".md5.txt >/tmp/apps_upd.lst";
         results = system(command.c_str());
         if ( results == 0 ) 
            msg = " OK";
         else
            msg = " FAILED";

         brw_results->add((select_extn + msg).c_str());
         Fl::flush();      
         
      }
   }
}
brw_multi->deselect();
if (report_type == "update" )
   box_results->label("Updates complete. Reboot to effect.");
cursor_normal();} {}
} 

Function {brw_results_callback(Fl_Widget *, void *)} {return_type {static void}
} {
  code {if (brw_results->value())
{
   select_results = brw_results->text(brw_results->value());
   if ( option_type.length() > 0 )
   {
     command = "sed -i '/" + select_results + "/d' " + copy2fsList;
     system(command.c_str());
     brw_results->load(copy2fsList.c_str());
     brw_results->remove(brw_results->size());
   }
   if (report_type == "delete" or report_type == "display_marked")
   {
     string target = select_results.substr(select_results.find_last_of("/")+1);
     command = "sed -i '/" + target + "/d' /tmp/audit_marked.lst";
     system(command.c_str());
     brw_results->load("/tmp/audit_marked.lst");
     brw_results->remove(brw_results->size());
   }
   if (report_type == "onboot")
   {
     command = "sed -i '/" + select_results + "/d' " + onbootList;
     system(command.c_str());
     target_dir = tcedir + "/optional/";
     report_type = "onboot";
     brw_extn->clear();
     cursor_wait();
  
     command = "ondemand -l ";
     results = system(command.c_str());
     if (results == 0 ) {
//      box_extn->label(target_dir.c_str());
        brw_extn->load("/tmp/ondemand.tmp");
        brw_extn->remove(brw_extn->size());
     }
  
     box_results->label("On Boot Items");
     brw_results->load(onbootList.c_str());
     brw_results->remove(brw_results->size());
  
     cursor_normal();
   }  

   if (report_type == "ondemand")
   {
     command = "ondemand -r " + select_results;
     system(command.c_str());   
     command = "ondemand -l ";
     results = system(command.c_str());
     if (results == 0 ) {
       brw_extn->load("/tmp/ondemand.tmp");
       brw_extn->remove(brw_extn->size());
     }  
     command = "ls -1 " + tcedir + "/ondemand | grep -v .img$ | sort -f > /tmp/ondemand.tmp";
     results = system(command.c_str());
     if (results == 0 ) {
       brw_results->load("/tmp/ondemand.tmp");
       brw_results->remove(brw_results->size());
     }  
     unlink("/tmp/ondemand.tmp");
   }  
}} {}
} 

Function {} {open
} {
  Fl_Window window {
    label AppsAudit
    callback {system("tce-remove");
exit(0);} open
    xywh {17 134 675 375} type Double hide resizable
  } {
    Fl_Menu_Bar menuBar {open
      xywh {0 0 685 20}
    } {
      Submenu menuDepends {
        label Dependencies
        xywh {0 0 63 20}
      } {
        MenuItem {} {
          label {Update .dep files.}
          user_data {"updatedeps"}
          callback depends_callback
          xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Build Reporting Database}
          user_data {"builddb"}
          callback depends_callback
          xywh {10 10 30 20}
        }
        MenuItem menu_dependson {
          label {List Dependencies}
          user_data {"dependson"}
          callback depends_callback
          xywh {5 5 30 20} deactivate
        }
        MenuItem menu_requiredby {
          label {List Required By}
          user_data {"requiredby"}
          callback depends_callback
          xywh {15 15 30 20} deactivate
        }
        MenuItem menu_missing {
          label {List Missing Dependencies}
          user_data {"audit"}
          callback depends_callback
          xywh {5 5 30 20} deactivate
        }
        MenuItem menu_nodepends {
          label {Display All with No Dependencies}
          user_data {"nodepends"}
          callback depends_callback
          xywh {5 5 30 20} deactivate
        }
        MenuItem menu_notrequired {
          label {Display All Not Depended On}
          user_data {"notrequired"}
          callback depends_callback
          xywh {15 15 30 20} deactivate
        }
        MenuItem menu_auditall {
          label {Display All with Missing Dependencies}
          user_data {"auditall"}
          callback depends_callback
          xywh {5 5 30 20} deactivate
        }
        MenuItem menu_delete {
          label {Mark for Deletion}
          user_data {"delete"}
          callback depends_callback
          xywh {10 10 30 20} deactivate
        }
        MenuItem menu_marked {
          label {Display Marked for Deletion}
          user_data {"display_marked"}
          callback depends_callback
          xywh {5 5 30 20} deactivate
        }
        MenuItem menu_clearlst {
          label {Clear Marked for Deletion}
          user_data {"clearlst"}
          callback depends_callback
          xywh {15 15 30 20} deactivate
        }
        MenuItem {} {
          label {Exit Dependencies Mode}
          user_data {"exit_depends"}
          callback depends_callback
          xywh {0 0 30 20}
        }
      }
      Submenu menuInstall {
        label {Install Options}
        xywh {0 0 63 20}
      } {
        MenuItem {} {
          label {Toggle Default Copy Install}
          user_data {"default"}
          callback options_callback
          tooltip {Toggle copy2fs.flg} xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Selective Copy Install}
          user_data {"select"}
          callback options_callback
          tooltip {Maintain copy2fs.lst} xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Exit Install Options}
          user_data {"exit_copy"}
          callback options_callback
          xywh {0 0 30 20}
        }
      }
      Submenu menuUpdates {
        label Updates
        xywh {0 0 63 20}
      } {
        MenuItem {} {
          label {Check for Updates}
          user_data {"update"}
          callback updates_callback
          xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Exit Update Mode}
          user_data {"exit_updates"}
          callback updates_callback
          xywh {0 0 30 20}
        }
      }
      Submenu menuMd5s {
        label Md5Check open
        xywh {20 20 63 20}
      } {
        MenuItem {} {
          label {Check Md5sums}
          user_data {"md5s"}
          callback md5s_callback
          xywh {20 20 30 20}
        }
        MenuItem {} {
          label {Exit Md5 Check Mode}
          user_data {"exit_md5s"}
          callback md5s_callback
          xywh {20 20 30 20}
        }
      }
      Submenu menuOnBoot {
        label OnBoot
        xywh {0 0 63 20}
      } {
        MenuItem {} {
          label Maintenance
          user_data {"onboot"}
          callback onboot_callback
          xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Exit OnBoot}
          user_data {"exit_onboot"}
          callback onboot_callback
          xywh {0 0 30 20}
        }
      }
      Submenu menuOnDemand {
        label OnDemand
        xywh {20 20 63 20}
      } {
        MenuItem {} {
          label Maintenance
          user_data {"ondemand"}
          callback ondemand_callback
          xywh {20 20 30 20}
        }
        MenuItem {} {
          label {Exit OnDemand}
          user_data {"exit_ondemand"}
          callback ondemand_callback
          xywh {20 20 30 20}
        }
      }
    }
    Fl_Box box_extn {
      label Select
      xywh {0 24 200 16} labelfont 1
    }
    Fl_Box box_results {
      label Results
      xywh {225 24 430 16} labelfont 1
    }
    Fl_Browser brw_extn {
      callback brw_extn_callback
      xywh {0 45 200 325} type Select textfont 4
    }
    Fl_Group grp_updates {
      xywh {0 45 200 325} hide deactivate
    } {
      Fl_Browser brw_multi {
        xywh {0 45 200 300} type Multi textfont 4
      }
      Fl_Button btn_multi {
        label {Process Selected Item(s)}
        callback btn_multi_callback
        xywh {0 350 200 20} deactivate
      }
    }
    Fl_Browser brw_results {
      callback brw_results_callback
      xywh {225 45 430 325} type Select textfont 4
    }
  }
  code {ifstream desktop_file("/etc/sysconfig/desktop");
getline(desktop_file,desktop);
desktop_file.close();

ifstream tcedir_file("/opt/.tce_dir");
getline(tcedir_file,tcedir);
tcedir_file.close();

target_dir = tcedir + "/optional";
window->label(target_dir.c_str());

copy2fsList = tcedir + "/copy2fs.lst";
copy2fsFlag = tcedir + "/copy2fs.flg";
onbootList = tcedir + "/onboot.lst";

option_type.empty();
report_type.empty();

command = "ls " + target_dir + "/tce.db >/dev/null 2>&1";

int results = system(command.c_str());
if (results == 0)
{
  report_type = "updatedeps";
}} {}
} 
