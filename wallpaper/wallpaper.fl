# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008- 2010} {} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <sstream>} {} 

decl {\#include <FL/Fl_Color_Chooser.H>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <stdio.h>} {} 

decl {\#include <locale.h>} {} 

decl {using namespace std;} {} 

decl {string target;} {} 

decl {double r,g,b;} {} 

Function {imageBrowserCallback(Fl_Widget*, void*)} {open return_type {static void}
} {
  code {installBtn->activate();} {}
} 

Function {btnCallback(Fl_Widget*, void* userdata)} {open return_type {static void}
} {
  code {string backgroundType;
string command;

if (userdata == "install")
{
   string selectedImage = imageBrowser->text(imageBrowser->value());
   
   if ( btnFull->value() == 1 )
      backgroundType = "full"; 
   else if ( btnFill->value() == 1 ) 
      backgroundType = "fill";
   else if ( btnTile->value() == 1 ) 
      backgroundType = "tile";
   else
      backgroundType = "center"; 
                                                                            
   command = "setbackground " + backgroundType + " /opt/backgrounds/" + selectedImage;   
   system(command.c_str());                                                                                                                                         
   exit(0);
}   
   
if (userdata == "color")
{
   if (!fl_color_chooser("New Color",r,g,b)) return;
   uchar ru,gu,bu;
   ru = 255*r+.5;
   gu = 255*g+.5;
   bu = 255*b+.5;
   char buffer[10];
   int n = sprintf(buffer,"%02X%02X%02X\\n",ru,gu,bu);
   string selectedColor = buffer;
   backgroundType = "solid";                                                  
   command = "setbackground " + backgroundType + " \\'\#" + selectedColor.substr(0,6) + "\\'";
   system(command.c_str());                                                          
   exit(0);                                                                   
}
                                                                               
if (userdata == "help")
   fl_message("Install images from /opt/backgrounds directory.");} {}
} 

Function {} {open selected
} {
  Fl_Window {} {open
    xywh {131 426 295 245} type Double hide
  } {
    Fl_File_Browser imageBrowser {
      callback imageBrowserCallback
      xywh {0 25 295 190} type Hold
      code0 {imageBrowser->filter("*.{png,gif,jpg,jpeg}");}
      code1 {imageBrowser->load("/opt/backgrounds");}
    }
    Fl_Round_Button btnFull {
      label Full
      xywh {35 5 50 15} down_box ROUND_DOWN_BOX value 1 selection_color 2
      code0 {btnFull->type(FL_RADIO_BUTTON);}
    }
    Fl_Round_Button btnTile {
      label Tile
      xywh {85 5 50 15} down_box ROUND_DOWN_BOX selection_color 2
      code0 {btnTile->type(FL_RADIO_BUTTON);}
    }
    Fl_Round_Button btnCenter {
      label Center
      xywh {130 5 64 15} down_box ROUND_DOWN_BOX selection_color 2
      code0 {btnCenter->type(FL_RADIO_BUTTON);}
    }
    Fl_Round_Button btnFill {
      label Fill
      xywh {195 5 50 15} down_box ROUND_DOWN_BOX selection_color 2
      code0 {btnFill->type(FL_RADIO_BUTTON);}
    }
    Fl_Button installBtn {
      label Install
      user_data {"install"}
      callback btnCallback
      xywh {25 220 64 20} deactivate
    }
    Fl_Button {} {
      label Color
      user_data {"color"}
      callback btnCallback
      xywh {110 220 64 20}
    }
    Fl_Button {} {
      label Help
      user_data {"help"}
      callback btnCallback
      xywh {200 220 64 20}
    }
  }
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");

int results = system("getRGB");
if (results == 0 )
{
  ifstream rgb_file("/tmp/current_rgb");
  istringstream stm;
  string rgb_info;

  getline(rgb_file, rgb_info);
  stm.str(rgb_info);
  stm >> r >> g >> b;
} else {
  r = 0.208;
  g = 0.384;
  b = 0.400;
}    

cout << r << endl;
cout << g << endl;
cout << b << endl;} {}
} 
