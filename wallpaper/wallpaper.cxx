// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "wallpaper.h"
// (c) Robert Shingledecker 2008- 2011
// Gradient addition by Brian Smith
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include <stdio.h>
#include <locale.h>
#include <FL/fl_message.h>
using namespace std;
static int locales_set=0; 
static string target, logo; 
static double r1,g1,b1,r2,g2,b2; 

char * mygettext(const char *msgid) {
  if (!locales_set) {                                                      
                                                                          
setlocale(LC_ALL, "");     
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");                              
                                                     
locales_set=1;                                       
                       
}                      
              
return gettext(msgid);
}

void btnCallback(Fl_Widget*, void* userdata) {
  string backgroundType;
string command;

if (logoBtn->value() == 1 )
    logo = "y";
else
    logo = "n";
    
if (btnBackground->value() == 1)
{
   if (imageBrowser->value()){
      string selectedImage = imageBrowser->text(imageBrowser->value());
   
     if ( btnFull->value() == 1 )
        backgroundType = "full"; 
     else if ( btnFill->value() == 1 ) 
        backgroundType = "fill";
     else if ( btnTile->value() == 1 ) 
        backgroundType = "tile";
     else
        backgroundType = "center"; 
                                                                            
     command = "setbackground " + logo + " " + backgroundType + " /opt/backgrounds/" + selectedImage;
     system(command.c_str());                                                                                                                                         
     if (userdata == "done") { exit(0); }
   }else{
   	fl_message("You must select a filename first");
   }
}   

   
if (btnColor->value() == 1)
{
   if (btnSolid->value() == 1){
	   uchar ru,gu,bu;
	   ru = 255*colorChooserGradient1->r()+.5;
	   gu = 255*colorChooserGradient1->g()+.5;
	   bu = 255*colorChooserGradient1->b()+.5;
	   char buffer[10];
	   int n = sprintf(buffer,"%02X%02X%02X\n",ru,gu,bu);
	   string selectedColor = buffer;
	   backgroundType = "solid";                                                  
	   command = "setbackground " + logo + " " + backgroundType + " \'#" + selectedColor.substr(0,6) + "\'";
	   system(command.c_str());                                                          
	   if (userdata == "done") { exit(0); }
    }else{
	   uchar ru_g1,gu_g1,bu_g1;
	   uchar ru_g2,gu_g2,bu_g2;
	   char buffer[10];
	   ru_g1 = 255* colorChooserGradient2->r();
	   gu_g1 = 255* colorChooserGradient2->g();
	   bu_g1 = 255* colorChooserGradient2->b();
	   ru_g2 = 255* colorChooserGradient1->r();
	   gu_g2 = 255* colorChooserGradient1->g();
	   bu_g2 = 255* colorChooserGradient1->b();
	   sprintf(buffer,"%02X%02X%02X\n",ru_g1,gu_g1,bu_g1);
	   string gradientColor1 = buffer;
	   sprintf(buffer,"%02X%02X%02X\n",ru_g2,gu_g2,bu_g2);
	   string gradientColor2 = buffer;
   
	   string gradientAngle;
	   if ( btnVertical->value() == 1 )
	      gradientAngle = "0"; 
	   else if ( btnHorizontal->value() == 1 ) 
	      gradientAngle = "90";
	   else if ( btnDiagonal->value() == 1 ) 
	      gradientAngle = "135";
	   else
	      gradientAngle = "0";    
	   
	   backgroundType = "gradient";
	   command = "setbackground " + logo + " " + backgroundType + " " + gradientAngle +" \'#" + gradientColor2.substr(0,6) + "\'" + " \'#" + gradientColor1.substr(0,6) + "\'";
	   system(command.c_str()); 
   
	   if (userdata == "done") { exit(0); }
	}
}
}

void radioCallback() {
  if (btnSolid->value() == 1)
{
	boxColor2->hide();
	colorChooserGradient2->deactivate();
}else{
	boxColor2->show();
	colorChooserGradient2->activate();
}
}

void modeCallback() {
  if (btnBackground->value() == 1){
	imageBrowser->activate();
	colorChooserGradient1->deactivate();
	colorChooserGradient2->deactivate();
	btnSolid->deactivate();
	btnVertical->deactivate();
	btnHorizontal->deactivate();
	btnDiagonal->deactivate();
	logoBtn->deactivate();

}

if (btnColor->value()==1){
	imageBrowser->deactivate();
	colorChooserGradient1->activate();
	colorChooserGradient2->activate();
	btnSolid->activate();
	btnVertical->activate();
	btnHorizontal->activate();
	btnDiagonal->activate();
	logoBtn->activate();
}
radioCallback();
}

Fl_Double_Window *window=(Fl_Double_Window *)0;

Fl_Button *installBtn=(Fl_Button *)0;

Fl_Button *doneBtn=(Fl_Button *)0;

Fl_Color_Chooser *colorChooserGradient1=(Fl_Color_Chooser *)0;

static void cb_colorChooserGradient1(Fl_Color_Chooser*, void*) {
  Fl_Color g1Color = fl_rgb_color(colorChooserGradient1->r() * 255,colorChooserGradient1->g() * 255,colorChooserGradient1->b() * 255);
boxColor1->color(g1Color);
Fl::wait(0);
Fl::flush();
Fl::redraw();
}

Fl_Color_Chooser *colorChooserGradient2=(Fl_Color_Chooser *)0;

static void cb_colorChooserGradient2(Fl_Color_Chooser*, void*) {
  Fl_Color g2Color = fl_rgb_color(colorChooserGradient2->r() * 255,colorChooserGradient2->g() * 255,colorChooserGradient2->b() * 255);
boxColor2->color(g2Color);
Fl::wait(0);
Fl::flush();
Fl::redraw();
}

Fl_Round_Button *btnSolid=(Fl_Round_Button *)0;

Fl_Round_Button *btnVertical=(Fl_Round_Button *)0;

Fl_Round_Button *btnHorizontal=(Fl_Round_Button *)0;

Fl_Round_Button *btnDiagonal=(Fl_Round_Button *)0;

Fl_Box *boxColor1=(Fl_Box *)0;

Fl_Box *boxColor2=(Fl_Box *)0;

Fl_Check_Button *logoBtn=(Fl_Check_Button *)0;

Fl_File_Browser *imageBrowser=(Fl_File_Browser *)0;

Fl_Round_Button *btnFull=(Fl_Round_Button *)0;

Fl_Round_Button *btnTile=(Fl_Round_Button *)0;

Fl_Round_Button *btnCenter=(Fl_Round_Button *)0;

Fl_Round_Button *btnFill=(Fl_Round_Button *)0;

Fl_Round_Button *btnBackground=(Fl_Round_Button *)0;

Fl_Round_Button *btnColor=(Fl_Round_Button *)0;

int main(int argc, char **argv) {
  int results = system("getRGB");
if (results == 0 )
{
  ifstream rgb_file("/tmp/current_rgb");
  istringstream stm;
  string rgb_info;

  getline(rgb_file, rgb_info);
  stm.str(rgb_info);
  stm >> r1 >> g1 >> b1 >> r2 >> g2 >> b2;
} else {
  r1 = 0.208;
  g1 = 0.384;
  b1 = 0.400;
  r2 = 0;
  g2 = 0;
  b2 = 0;
}
  { window = new Fl_Double_Window(515, 475, mygettext("Wallpaper"));
    { installBtn = new Fl_Button(179, 437, 65, 30, mygettext("Preview"));
      installBtn->callback((Fl_Callback*)btnCallback, (void*)("preview"));
    } // Fl_Button* installBtn
    { doneBtn = new Fl_Button(271, 437, 65, 30, mygettext("Done"));
      doneBtn->callback((Fl_Callback*)btnCallback, (void*)("done"));
    } // Fl_Button* doneBtn
    { Fl_Group* o = new Fl_Group(6, 223, 500, 207);
      o->box(FL_UP_BOX);
      { colorChooserGradient1 = new Fl_Color_Chooser(15, 270, 200, 95, mygettext("Color #1"));
        colorChooserGradient1->box(FL_DOWN_BOX);
        colorChooserGradient1->color((Fl_Color)FL_BACKGROUND_COLOR);
        colorChooserGradient1->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        colorChooserGradient1->labeltype(FL_NORMAL_LABEL);
        colorChooserGradient1->labelfont(0);
        colorChooserGradient1->labelsize(14);
        colorChooserGradient1->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        colorChooserGradient1->callback((Fl_Callback*)cb_colorChooserGradient1);
        colorChooserGradient1->align(FL_ALIGN_TOP);
        colorChooserGradient1->when(FL_WHEN_CHANGED);
        colorChooserGradient1->rgb(r1,g1,b1);
      } // Fl_Color_Chooser* colorChooserGradient1
      { colorChooserGradient2 = new Fl_Color_Chooser(297, 270, 200, 95, mygettext("Color #2"));
        colorChooserGradient2->box(FL_DOWN_BOX);
        colorChooserGradient2->color((Fl_Color)FL_BACKGROUND_COLOR);
        colorChooserGradient2->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
        colorChooserGradient2->labeltype(FL_NORMAL_LABEL);
        colorChooserGradient2->labelfont(0);
        colorChooserGradient2->labelsize(14);
        colorChooserGradient2->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        colorChooserGradient2->callback((Fl_Callback*)cb_colorChooserGradient2);
        colorChooserGradient2->align(FL_ALIGN_TOP);
        colorChooserGradient2->when(FL_WHEN_CHANGED);
        colorChooserGradient2->rgb(r2,g2,b2);
      } // Fl_Color_Chooser* colorChooserGradient2
      { btnSolid = new Fl_Round_Button(10, 375, 95, 25, mygettext("Solid Color"));
        btnSolid->type(102);
        btnSolid->down_box(FL_ROUND_DOWN_BOX);
        btnSolid->labelsize(12);
        btnSolid->callback((Fl_Callback*)radioCallback);
      } // Fl_Round_Button* btnSolid
      { btnVertical = new Fl_Round_Button(114, 375, 125, 25, mygettext("Vertical Gradient"));
        btnVertical->type(102);
        btnVertical->down_box(FL_ROUND_DOWN_BOX);
        btnVertical->labelsize(12);
        btnVertical->callback((Fl_Callback*)radioCallback);
      } // Fl_Round_Button* btnVertical
      { btnHorizontal = new Fl_Round_Button(246, 375, 125, 25, mygettext("Horizontal Gradient"));
        btnHorizontal->type(102);
        btnHorizontal->down_box(FL_ROUND_DOWN_BOX);
        btnHorizontal->labelsize(12);
        btnHorizontal->callback((Fl_Callback*)radioCallback);
      } // Fl_Round_Button* btnHorizontal
      { btnDiagonal = new Fl_Round_Button(378, 375, 122, 25, mygettext("Diagonal Gradient"));
        btnDiagonal->type(102);
        btnDiagonal->down_box(FL_ROUND_DOWN_BOX);
        btnDiagonal->labelsize(12);
        btnDiagonal->callback((Fl_Callback*)radioCallback);
      } // Fl_Round_Button* btnDiagonal
      { boxColor1 = new Fl_Box(231, 278, 50, 35);
        boxColor1->box(FL_UP_BOX);
        Fl_Color g1Color = fl_rgb_color(colorChooserGradient1->r() * 255,colorChooserGradient1->g() * 255,colorChooserGradient1->b() * 255);
        boxColor1->color(g1Color);
      } // Fl_Box* boxColor1
      { boxColor2 = new Fl_Box(231, 324, 50, 35);
        boxColor2->box(FL_UP_BOX);
        Fl_Color g2Color = fl_rgb_color(colorChooserGradient2->r() * 255,colorChooserGradient2->g() * 255,colorChooserGradient2->b() * 255);
        boxColor2->color(g2Color);
      } // Fl_Box* boxColor2
      { logoBtn = new Fl_Check_Button(229, 398, 55, 23, mygettext("Logo"));
        logoBtn->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* logoBtn
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(6, 6, 500, 206);
      o->box(FL_UP_BOX);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { imageBrowser = new Fl_File_Browser(46, 53, 295, 139, mygettext("Install images from /opt/backgrounds directory"));
        imageBrowser->type(2);
        imageBrowser->labelsize(12);
        imageBrowser->align(FL_ALIGN_TOP);
        imageBrowser->filter("*.{png,gif,jpg,jpeg}");
        imageBrowser->load("/opt/backgrounds");
        for (int x=1; x <= imageBrowser->size(); x++) { if (strcmp(imageBrowser->text(x), "../") == 0) { imageBrowser->remove(x); } }
      } // Fl_File_Browser* imageBrowser
      { btnFull = new Fl_Round_Button(360, 74, 50, 15, mygettext("Full"));
        btnFull->down_box(FL_ROUND_DOWN_BOX);
        btnFull->selection_color((Fl_Color)2);
        btnFull->type(FL_RADIO_BUTTON);
      } // Fl_Round_Button* btnFull
      { btnTile = new Fl_Round_Button(360, 99, 50, 15, mygettext("Tile"));
        btnTile->down_box(FL_ROUND_DOWN_BOX);
        btnTile->selection_color((Fl_Color)2);
        btnTile->type(FL_RADIO_BUTTON);
      } // Fl_Round_Button* btnTile
      { btnCenter = new Fl_Round_Button(360, 124, 64, 15, mygettext("Center"));
        btnCenter->down_box(FL_ROUND_DOWN_BOX);
        btnCenter->selection_color((Fl_Color)2);
        btnCenter->type(FL_RADIO_BUTTON);
      } // Fl_Round_Button* btnCenter
      { btnFill = new Fl_Round_Button(360, 149, 50, 15, mygettext("Fill"));
        btnFill->down_box(FL_ROUND_DOWN_BOX);
        btnFill->selection_color((Fl_Color)2);
        btnFill->type(FL_RADIO_BUTTON);
      } // Fl_Round_Button* btnFill
      o->end();
    } // Fl_Group* o
    { btnBackground = new Fl_Round_Button(6, 7, 500, 26, mygettext("Background Image"));
      btnBackground->type(102);
      btnBackground->down_box(FL_ROUND_DOWN_BOX);
      btnBackground->callback((Fl_Callback*)modeCallback);
    } // Fl_Round_Button* btnBackground
    { btnColor = new Fl_Round_Button(6, 224, 500, 26, mygettext("Solid Color or 2 Color Gradient"));
      btnColor->type(102);
      btnColor->down_box(FL_ROUND_DOWN_BOX);
      btnColor->callback((Fl_Callback*)modeCallback);
    } // Fl_Round_Button* btnColor
    window->end();
  } // Fl_Double_Window* window
  results = system("cat $HOME/.setbackground 2>/dev/null | grep ' -center ' >/dev/null");
if (results == 0){
	btnCenter->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep ' -full ' >/dev/null");
if (results == 0){
	btnFull->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep ' -tile ' >/dev/null");
if (results == 0){
	btnTile->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep ' -fill ' >/dev/null");
if (results == 0){
	btnFill->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep 'gradient 0' >/dev/null");
if (results == 0){
	btnVertical->value(1);
	btnColor->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep 'gradient 90' >/dev/null");
if (results == 0){
	btnHorizontal->value(1);
	btnColor->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep 'gradient 135' >/dev/null");
if (results == 0){
	btnDiagonal->value(1);
	btnColor->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep ' -solid ' >/dev/null");
if (results == 0){
	btnSolid->value(1);
	btnColor->value(1);
}

results = system("cat $HOME/.setbackground 2>/dev/null | grep '/usr/share/pixmaps/logo.png' >/dev/null");
if (results == 0){
	logoBtn->value(1);
	btnColor->value(1);
}

if (btnColor->value() == 0) {btnBackground->value(1);}

if (btnVertical->value() == 0 && btnHorizontal->value() == 0 && btnDiagonal->value() == 0 && btnSolid->value() == 0){
	btnSolid->value(1);
}

if (btnCenter->value() == 0 && btnFull->value() == 0 && btnTile->value() == 0 && btnFill->value() == 0){
	btnFull->value(1);
}

modeCallback();
radioCallback();
  window->show(argc, argv);
  return Fl::run();
}
