# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008-2010} {} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <sys/types.h>} {} 

decl {\#include <sys/stat.h>} {} 

decl {\#include <fcntl.h>} {} 

decl {\#include <signal.h>} {} 

decl {using namespace std;} {} 

decl {FILE *G_in = NULL;         // how we read the child} {} 

decl {int   G_out = 0;                // how we write to the child} {} 

decl {string download_dir, last_dir;} {} 

decl {string select_extn;} {} 

decl {string repository;} {} 

decl {ifstream ifaberr;} {} 

decl {string aberr;} {} 

decl {string command, msg;} {} 

Function {HandleInput_CB(int, void *data)} {open return_type {static void}
} {
  code {static int x = 0;
static char s[1024];
char c = fgetc(G_in);            // read one char at a time
if ( c == '\\n' || x == (sizeof(s)-1) )
{
  s[x] = 0;
  status_out->value(s);
  string result = s;
  int loc = result.find((select_extn + ": OK"));
  if (loc != string::npos)
  {
    status_out->color(175);
  }
  x = 0;
} else
  { s[x++] = c; }} {}
} 

Function {btn_callback(Fl_Widget *, void* userdata)} {open return_type {static void}
} {
  code {if (userdata == "tcz")
{
   repository = (const char*) userdata;
   window->cursor(FL_CURSOR_WAIT);
   Fl::flush();
   command = "/usr/bin/tce-fetch.sh info.lst.gz";
   int results = system(command.c_str());
   window->cursor(FL_CURSOR_DEFAULT);
   Fl::flush();
   if (results == 0 )
   {
      system("gunzip info.lst.gz");
      brw_extn->load("info.lst");
      btn_install->deactivate();
      btn_download->deactivate();
      box_extensions->activate();
      btn_search->activate();
      search_field->activate();                                              
      system("rm -f info.lst"); 
    } else
      fl_message("Connection error, check network or mirror.");  
} else if (userdata == "install")
{
   status_out->activate();
   command = "tce-load -w -i " + select_extn;
   status_out->color(FL_WHITE);
   status_out->value(command.c_str());
   command = command + "\\n";
   write(G_out, command.c_str(), command.length());
   Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);

} else if (userdata == "download")
{
   status_out->activate();
   command = "tce-load -w " + select_extn;
   status_out->color(FL_WHITE);
   status_out->value(command.c_str());
   command = command + "\\n";
   write(G_out, command.c_str(), command.length());
   Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);
   
} else if (userdata == "toggle")
{
   search_field->value("");
   if (btn_search->label() == "Search")
      btn_search->label("Provides");
   else
      btn_search->label("Search");
} else if (userdata == "search")
{
   if (btn_search->label() == "Search")
      command = "/usr/bin/search.sh";
   else
      command = "/usr/bin/provides.sh";
      
  window->cursor(FL_CURSOR_WAIT);
  Fl::flush();
  command = command + " " + (string)search_field->value();
  int results = system(command.c_str());
  window->cursor(FL_CURSOR_DEFAULT);
  Fl::flush();
  if (results == 0 )
  {
    brw_extn->load("info.lst");
    btn_install->deactivate();
    btn_download->deactivate();
    btn_search->activate();
    search_field->activate();                                              
    system("rm -f info.lst");
  } 
} else if (userdata == "quit")
  {
    ofstream last_dir_fout("/opt/.appbrowser",ios::out|ios::out);
    if ( last_dir_fout.is_open())
    {
       last_dir_fout << last_dir << endl;
       last_dir_fout.close();
    }
    command = "quit\\n";
    write(G_out, command.c_str(), command.length());
    unlink("ab2tce.fifo");
    exit(0);

  }} {}
} 

Function {brw_extn_callback(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {if (brw_extn->value())
{
   select_extn = brw_extn->text(brw_extn->value());
   string select_extn_file = select_extn + (string)".info";
   command = "/usr/bin/tce-fetch.sh " + select_extn_file;
   int results = system(command.c_str());
   if (results == 0)
   {
      brw_info->load(select_extn_file.c_str());
      command = "rm -f " + select_extn_file;
      system(command.c_str());
      btn_install->activate();
      btn_download->activate();
      tab_info->activate();
      tab_files->activate();
      brw_list->load("");
      tab_depends->activate();
      brw_dep->load("");
      tab_info->show();
   }
}} {}
} 

Function {local_btn_callback(Fl_Widget*, void* userdata)} {open return_type {static void}
} {
  code {string title = "Install Local Extension";
string selected;
string flags = " -i ";
string target_dir = last_dir;
if (userdata == "File/Optional")
{
   target_dir = last_dir + "/optional";
   title = "Install Optional Extension";
}   
Fl_File_Chooser chooser(target_dir.c_str(),"*.tcz",Fl_File_Chooser::SINGLE,title.c_str());
chooser.show();                                             
// Block until user picks something.
//     (The other way to do this is to use a callback())                                                      
while(chooser.shown())
    { Fl::wait(); }
// User hit cancel?
if ( chooser.value() == NULL )
   return; 
   
   
// cout << chooser.value() << endl;
selected = (string)chooser.value();

last_dir = chooser.directory();
// cout << last_dir << endl;

command = "tce-load" + flags + (string)chooser.value();
// cout << command << endl;

status_out->activate();
status_out->color(FL_WHITE);
status_out->value(command.c_str());
command = command + "\\n";
write(G_out, command.c_str(), command.length());
Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);} {}
} 

Function {tabs_callback(Fl_Widget*, void* userdata)} {open return_type {static void}
} {
  code {if (brw_extn->value())
{
   int results;
   select_extn = brw_extn->text(brw_extn->value());
   if (tab_files->visible())
   {
     string select_extn_file = select_extn + (string)".list";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_list->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
   
   if (tab_depends->visible())
   {
     string select_extn_file = select_extn + (string)".dep";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_dep->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
}} {}
} 

Function {} {open
} {
  Fl_Window window {
    label Appbrowser
    user_data {"quit"}
    callback btn_callback open
    xywh {2 158 685 400} type Double hide resizable
  } {
    Fl_Button {} {
      label Connect
      user_data {"tcz"}
      callback btn_callback
      xywh {5 0 90 20}
    }
    Fl_Button {} {
      label Local
      user_data {"File/Local"}
      callback local_btn_callback
      xywh {100 0 90 20}
    }
    Fl_Button btn_search {
      label Search
      user_data {"toggle"}
      callback btn_callback selected
      tooltip {Toggle Search / Provides} xywh {205 0 77 20} deactivate
    }
    Fl_Input search_field {
      user_data {"search"}
      callback btn_callback
      xywh {282 0 400 20} labeltype NO_LABEL when 8 deactivate
    }
    Fl_Box box_extensions {
      label Extensions
      xywh {40 24 100 16} deactivate
    }
    Fl_Browser brw_extn {
      callback brw_extn_callback
      xywh {0 45 200 325} type Select textfont 4
    }
    Fl_Tabs tabs {
      callback tabs_callback open
      xywh {205 20 475 350}
    } {
      Fl_Group tab_info {
        label Info open
        xywh {205 45 475 325} when 1 hide deactivate
      } {
        Fl_Browser brw_info {
          xywh {210 50 470 318} textfont 4
        }
      }
      Fl_Group tab_files {
        label Files open
        xywh {205 45 475 325} when 1 hide deactivate
      } {
        Fl_Browser brw_list {
          xywh {210 50 470 318} textfont 4
        }
      }
      Fl_Group tab_depends {
        label Depends open
        xywh {205 45 475 325} deactivate
      } {
        Fl_Browser brw_dep {
          xywh {210 50 470 318} textfont 4
        }
      }
    }
    Fl_Button btn_install {
      label {Install }
      user_data {"install"}
      callback btn_callback
      xywh {5 375 90 20} deactivate
    }
    Fl_Button btn_download {
      label OnDemand
      user_data {"download"}
      callback btn_callback
      tooltip {Downloads to optional directory.} xywh {100 375 90 20} deactivate
    }
    Fl_Output status_out {
      label Status
      xywh {250 375 430 20} deactivate
    }
  }
  code {ifstream download_dir_file("/opt/.tce_dir");
getline(download_dir_file,download_dir);
download_dir_file.close();

last_dir = download_dir + "/optional";   
ifstream last_dir_file("/opt/.appbrowser");
if ( last_dir_file.is_open() )
{
   getline(last_dir_file,last_dir);
   last_dir_file.close();
}

// Process group leader (for killpg())
// setsid();

// Make fifo
unlink("ab2tce.fifo");
if ( mkfifo("ab2tce.fifo", 0666) < 0 ) {
    perror("mkfifo(ab2tce.fifo)");
    exit(1);
}

// Popen child for reading, set child to read fifo
if ( ( G_in = popen("ab2tce.sh < ab2tce.fifo", "r") ) == NULL ) {
    perror("popen failed");
    exit(1);
}
setbuf(G_in, NULL);                         // disable buffering

// Now open fifo
if ( ( G_out = open("ab2tce.fifo", O_WRONLY) ) < 0 ) {
    perror("open(ab2tce.fifo) for write failed");
    unlink("ab2tce.fifo");
    exit(1);
}} {}
} 
