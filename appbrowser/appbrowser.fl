# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008-2011} {selected
} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <sys/types.h>} {} 

decl {\#include <sys/stat.h>} {} 

decl {\#include <fcntl.h>} {} 

decl {\#include <signal.h>} {} 

decl {\#include <locale.h>} {} 

decl {using namespace std;} {} 

decl {FILE *G_in = NULL;         // how we read the child} {} 

decl {int   G_out = 0;                // how we write to the child} {} 

decl {string download_dir, last_dir;} {} 

decl {string select_extn;} {} 

decl {string repository;} {} 

decl {ifstream ifaberr;} {} 

decl {string aberr;} {} 

decl {string mode, command, msg, mirror;} {} 

decl {Fl_Text_Buffer *txtBuffer = new Fl_Text_Buffer;} {} 

Function {cursor_normal()} {open private return_type void
} {
  code {window->cursor(FL_CURSOR_DEFAULT);
Fl::flush();} {}
} 

Function {cursor_wait()} {open private return_type void
} {
  code {window->cursor(FL_CURSOR_WAIT);
Fl::flush();} {}
} 

Function {HandleInput_CB(int, void *data)} {open private return_type {static void}
} {
  code {static int x = 0;
static char s[1024];
char c = fgetc(G_in);            // read one char at a time
if ( c == '\\n' || x == (sizeof(s)-1) )
{
  s[x] = 0;
  status_out->value(s);
  string result = s;
  int loc = result.find((select_extn + ": OK"));
  if (loc != string::npos)
  {
    status_out->color(175);
  }
  x = 0;
} else
  { s[x++] = c; }} {}
} 

Function {fetch_extension()} {open private return_type void
} {
  code {status_out->activate();
status_out->color(FL_WHITE);
status_out->value(command.c_str());
command = command + "\\n";
write(G_out, command.c_str(), command.length());
Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);} {}
} 

Function {btn_callback(Fl_Widget *, void* userdata)} {open private return_type {static void}
} {
  code {if (userdata == "tcz")
{
   mode = "tcz";
   repository = (const char*) userdata;
   cursor_wait();
   command = "/usr/bin/tce-fetch.sh info.lst.gz";
   int results = system(command.c_str());
   cursor_normal();
   if (results == 0 )
   {
      system("gunzip info.lst.gz");
      brw_select->load("info.lst");
      brw_select->remove(brw_select->size());
      btn_go->deactivate();
      box_select->label("Select Extension");
      box_select->activate();
      search_choices->activate();
      search_field->activate();                                              
      unlink("info.lst");
    } else
      fl_message("Connection error, check network or mirror.");
} else if (userdata == "go")
{
   status_out->value("");
   status_out->label("Status");
   int action = install_choices->value();
   string action_type;
   switch(action)
   {
      case 0 : action_type="wi";
               break;
      case 1 : action_type="wo";
               break;
      case 2 : action_type="wil";
               break;
      case 3 : action_type="w";
               break;
      default: mode="w";
   }
   command = "tce-load -" + action_type + " " + select_extn;
   cout << command << endl;
   fetch_extension();
} else if (userdata == "setdrive")
{
   cursor_wait();
   command = "tce-setdrive -l";
   int results = system(command.c_str());
   cursor_normal();
   cout << results << endl;
   if (results == 0 )
   {
      mode = "setdrive";
      brw_select->load("/tmp/tcesetdev");
      brw_select->remove(brw_select->size());
      box_select->label("Select for TCE dir.");
      box_select->activate();
      unlink("/tmp/tcesetdev");
   } else
     fl_message("No available drives found!");
     
} else if (userdata == "search")
{
   if (search_choices->text() == "Search")
      command = "/usr/bin/search.sh";
   else
      command = "/usr/bin/provides.sh";
      
  cursor_wait();
  command = command + " " + (string)search_field->value();
  int results = system(command.c_str());
  cursor_normal();
  if (results == 0 )
  {
    brw_select->load("info.lst");
    brw_select->remove(brw_select->size());
    btn_go->deactivate();
    search_choices->activate();
    search_field->activate();                                              
    unlink("info.lst");
  }
      
} else if (userdata == "quit")
  {
    if ( last_dir.compare(0,8,"/tmp/tce") != 0 )
    {
      ofstream last_dir_fout("/opt/.appbrowser",ios::out|ios::out);
      if ( last_dir_fout.is_open())
      {
        last_dir_fout << last_dir << endl;
        last_dir_fout.close();
      }
    }  
    command = "quit\\n";
    write(G_out, command.c_str(), command.length());
    unlink("ab2tce.fifo");
    exit(0);

  }} {}
} 

Function {brw_select_callback(Fl_Widget *, void *)} {open private return_type {static void}
} {
  code {if (brw_select->value())
{
   select_extn = brw_select->text(brw_select->value());
   if ( mode == "tcz" )
   {
      string select_extn_file = select_extn + (string)".info";
      string info_line;
      command = "/usr/bin/tce-fetch.sh " + select_extn_file;
      int results = system(command.c_str());
      if (results == 0)
      {
         txtBuffer->loadfile(select_extn_file.c_str());

         unlink(select_extn_file.c_str());
         btn_go->activate();
         
         tabs->activate();
         infoTab->activate();
         filesTab->activate();
         dependsTab->activate();
         sizeTab->activate();
         infoTab->show();
      } 
   }
   if ( mode == "mirror" )
   {
     mirror = select_extn;
     window->label(mirror.c_str());
     ofstream fout("/opt/tcemirror", ios::out|ios::out);
     if (! fout.is_open())
     {
       cerr << "Can't open /opt/tcemirror for output!" << endl;
       exit(EXIT_FAILURE);
     }
     fout << mirror << endl;
     fout.close();      
   }
   if ( mode == "setdrive" )
   {
      command = "/usr/bin/tce-setdrive -s " + select_extn;
      int results = system(command.c_str());
      if (results == 0)
      {
         download_dir = select_extn + "/tce";
         ofstream fout("/opt/.tce_dir", ios::out|ios::out);
         if (! fout.is_open())
         {
            cerr << "Can't open /opt/.tce_dir for output!" << endl;
            exit(EXIT_FAILURE);
         }
         fout << download_dir << endl;
         fout.close();      
         brw_select->clear();
         box_select->label("");
         download_dir += "/optional";
         status_out->value((download_dir).c_str());
         btn_tce->deactivate();         
      }
   }
}} {}
} 

Function {local_btn_callback(Fl_Widget*, void* userdata)} {open private return_type {static void}
} {
  code {string title = "Install Local Extension";
string selected;
string flags = " -i ";
string target_dir = last_dir;
if (userdata == "File/Optional")
{
   target_dir = last_dir + "/optional";
   title = "Install Optional Extension";
}   
Fl_File_Chooser chooser(target_dir.c_str(),"*.tcz",Fl_File_Chooser::SINGLE,title.c_str());
chooser.show();                                             
// Block until user picks something.
//     (The other way to do this is to use a callback())                                                      
while(chooser.shown())
    { Fl::wait(); }
// User hit cancel?
if ( chooser.value() == NULL )
   return; 
   
   
// cout << chooser.value() << endl;
selected = (string)chooser.value();

last_dir = chooser.directory();
// cout << last_dir << endl;

command = "tce-load" + flags + (string)chooser.value();
// cout << command << endl;

status_out->activate();
status_out->color(FL_WHITE);
status_out->value(command.c_str());
command = command + "\\n";
write(G_out, command.c_str(), command.length());
Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);} {}
} 

Function {mirror_btn_callback(Fl_Widget*, void* userdata)} {open private return_type {static void}
} {
  code {mode = "mirror";
tabs->deactivate();
int results = brw_select->load("/usr/local/share/mirrors");
cout << results << endl;
if ( results == 0)
  fl_message("Must load mirrors.tcz extension in order to use this feature.");
else {
   brw_select->remove(brw_select->size());
   box_select->label("Select Mirror");
   box_select->activate();
}} {}
} 

Function {tabsGroupCB(Fl_Widget*, void* userdata)} {open private return_type {static void}
} {
  code {if (brw_select->value())
{
   int results;
   select_extn = brw_select->text(brw_select->value());
   
   if (infoTab->visible())
   {
     string select_extn_file = select_extn + (string)".info";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        txtBuffer->loadfile(select_extn_file.c_str());
        unlink(select_extn_file.c_str());
     }
   }
   
   if (filesTab->visible())
   {
     string select_extn_file = select_extn + (string)".list";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        txtBuffer->loadfile(select_extn_file.c_str());
        unlink(select_extn_file.c_str());
     }
   }
   
   if (dependsTab->visible())
   {
     cursor_wait();
     string select_extn_file = select_extn + (string)".tree";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     cursor_normal();
     if (results == 0)
     {
        txtBuffer->loadfile(select_extn_file.c_str());
        unlink(select_extn_file.c_str());
     }
   }
   if (sizeTab->visible())
   {
     cursor_wait();

     command = "/usr/bin/tce-size " + select_extn;
     FILE *pipe = popen(command.c_str(),"r");
     char *mbuf = (char *) calloc(PATH_MAX,sizeof(char));

     if (pipe) {
     	txtBuffer->loadfile("");
	while (fgets(mbuf,PATH_MAX,pipe)) {
	   string line(mbuf);
           txtBuffer->append(line.c_str());
	}
	pclose(pipe);
	free(mbuf);
     }

     cursor_normal();
   }
}} {}
} 

Function {} {open
} {
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore", "/usr/local/share/locale");
textdomain("tinycore");

ifstream mirror_fin("/opt/tcemirror");
getline(mirror_fin,mirror);
mirror_fin.close();

ifstream dd_fin("/opt/.tce_dir");
getline(dd_fin,download_dir);
dd_fin.close();

download_dir += "/optional";
last_dir = download_dir;   
ifstream last_dir_file("/opt/.appbrowser");
if ( last_dir_file.is_open() )
{
   getline(last_dir_file,last_dir);
   last_dir_file.close();
}

// Make fifo
unlink("/tmp/ab2tce.fifo");
if ( mkfifo("/tmp/ab2tce.fifo", 0666) < 0 ) {
    perror("mkfifo(/tmp/ab2tce.fifo)");
    exit(1);
}

// Popen child for reading, set child to read fifo
if ( ( G_in = popen("ab2tce.sh < /tmp/ab2tce.fifo", "r") ) == NULL ) {
    perror("popen failed");
    exit(1);
}
setbuf(G_in, NULL);                         // disable buffering

// Now open fifo
if ( ( G_out = open("/tmp/ab2tce.fifo", O_WRONLY) ) < 0 ) {
    perror("open(/tmp/ab2tce.fifo) for write failed");
    unlink("/tmp/ab2tce.fifo");
    exit(1);
}} {}
  Fl_Window window {
    label Appbrowser
    user_data {"quit"}
    callback btn_callback open
    xywh {17 20 685 395} type Double hide resizable
    code0 {window->label(mirror.c_str());}
  } {
    Fl_Button {} {
      label Connect
      user_data {"tcz"}
      callback btn_callback
      xywh {0 0 68 20}
    }
    Fl_Button {} {
      label Local
      user_data {"File/Local"}
      callback local_btn_callback
      xywh {69 0 65 20}
    }
    Fl_Button {} {
      label Mirrors
      user_data {"mirror"}
      callback mirror_btn_callback
      xywh {135 0 65 20}
    }
    Fl_Choice search_choices {
      xywh {206 0 93 20} down_box BORDER_BOX deactivate
    } {
      MenuItem {} {
        label Search
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label Provides
        xywh {0 0 30 20}
      }
    }
    Fl_Input search_field {
      user_data {"search"}
      callback btn_callback
      xywh {300 0 385 20} labeltype NO_LABEL when 8 deactivate
    }
    Fl_Box box_select {
      xywh {40 24 120 16} deactivate
    }
    Fl_Browser brw_select {
      callback brw_select_callback
      xywh {0 45 200 325} type Select textfont 4
    }
    Fl_Tabs tabs {
      callback tabsGroupCB
      xywh {205 20 475 350}
    } {
      Fl_Group infoTab {
        label Info open
        xywh {205 45 475 325} when 1 hide deactivate
      } {
        Fl_Text_Display infoDisplay {
          xywh {210 50 470 318} textfont 4
          code0 {infoDisplay->buffer(txtBuffer);}
        }
      }
      Fl_Group filesTab {
        label Files open
        xywh {205 45 475 325} when 1 hide deactivate
      } {
        Fl_Text_Display filesDisplay {
          xywh {210 50 470 318} textfont 4
          code0 {filesDisplay->buffer(txtBuffer);}
        }
      }
      Fl_Group dependsTab {
        label Depends open
        xywh {205 45 475 325} deactivate
      } {
        Fl_Text_Display dependsDisplay {
          xywh {210 50 470 318} labelfont 1 textfont 4
          code0 {dependsDisplay->buffer(txtBuffer);}
        }
      }
      Fl_Group sizeTab {
        label Size open
        xywh {205 45 475 325} hide deactivate
      } {
        Fl_Text_Display sizeDisplay {
          xywh {210 50 470 318} textfont 4
          code0 {sizeDisplay->buffer(txtBuffer);}
        }
      }
    }
    Fl_Choice install_choices {
      xywh {3 373 140 20} down_box BORDER_BOX
    } {
      MenuItem {} {
        label OnBoot
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label OnDemand
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label {Download + Load}
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label {Download Only}
        xywh {0 0 30 20}
      }
    }
    Fl_Button btn_go {
      label Go
      user_data {"go"}
      callback btn_callback
      xywh {145 373 30 20} deactivate
    }
    Fl_Output status_out {
      label Status
      xywh {225 373 420 20}
      code0 {status_out->value(download_dir.c_str());}
      code1 {status_out->label("  TCE:");}
    }
    Fl_Button btn_tce {
      label Set
      user_data {"setdrive"}
      callback btn_callback
      xywh {645 373 34 20} deactivate
      code0 {if (download_dir.compare(0,8,"/tmp/tce") == 0 ){btn_tce->activate();};}
    }
  }
} 
