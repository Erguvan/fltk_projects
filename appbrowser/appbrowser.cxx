// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "appbrowser.h"
// (c) Robert Shingledecker 2008
#include <iostream>
#include <fstream>
#include <FL/fl_message.H>
#include <FL/Fl_File_Chooser.H>
using namespace std;
static string download_dir; 
static string select_extn; 
static string repository; 

void btn_callback(Fl_Widget *, void* userdata) {
  if (userdata == "tce" or userdata == "tcz")
{
   repository = (const char*) userdata;
   string command = "/usr/bin/tce-fetch.sh info.lst " + repository;
   int results = system(command.c_str());
   if (results == 0 )
   {
      brw_extn->load("info.lst");
      btn_install->deactivate();
      btn_download->deactivate();
      box_extensions->activate();
      search_field->activate();                                              
      system("rm -f info.lst"); 
    } else
      fl_message("Error trying to connect. Try Later.");  
} else if (userdata == "install")
{
   string loadit = "tce-load " + select_extn + " wget install";
//  cout << select_extn << endl;
   int results = system(loadit.c_str());
   if (results == 0 )
   {
      string msg = select_extn + " installed successfully!";
      fl_message(msg.c_str());
   } else
      fl_message("An Error Occured. Try Later.");
} else if (userdata == "download")
{
   string grabit = "tce-load " + select_extn + " wget";
// cout << grabit << endl;
   int results = system(grabit.c_str());
   if (results == 0 )
   {
      string msg = select_extn + " downloaded successfully!";
      fl_message(msg.c_str());
   } else
      fl_message("An Error Occured. Try Later.");
} else if (userdata == "search")
{
  string command = "/usr/bin/search.sh " + repository + " " + (string)search_field->value();
  int results = system(command.c_str());
  if (results == 0 )
  {
    brw_extn->load("info.lst");
    btn_install->deactivate();
    btn_download->deactivate();
    search_field->activate();                                              
    system("rm -f info.lst");
  } 
} else if (userdata == "quit")
  exit(0);
}

void brw_extn_callback(Fl_Widget *, void *) {
  if (brw_extn->value())
{
   select_extn = brw_extn->text(brw_extn->value());
   string select_extn_file = select_extn + (string)".info";
   string command = "/usr/bin/tce-fetch.sh " + select_extn_file;
   int results = system(command.c_str());
   if (results == 0)
   {
      brw_info->load(select_extn_file.c_str());
      command = "rm -f " + select_extn_file;
      system(command.c_str());
      btn_install->activate();
      btn_download->activate();
      tab_info->activate();
      tab_files->activate();
      brw_list->load("");
      tab_depends->activate();
      brw_dep->load("");
      tab_info->show();
   }
}
}

void local_btn_callback(Fl_Widget*, void* userdata) {
  string title = "Install Local Extension";
string target_dir = download_dir;
if (userdata == "File/Optional")
{
   target_dir = download_dir + "/optional";
   title = "Install Optional Extension";
}   
Fl_File_Chooser chooser(target_dir.c_str(),"*",Fl_File_Chooser::SINGLE,title.c_str());
chooser.show();                                             
// Block until user picks something.
//     (The other way to do this is to use a callback())                                                      
while(chooser.shown())
    { Fl::wait(); }
// User hit cancel?
if ( chooser.value() == NULL )
   return; 
// cout << chooser.value() << endl;
string command = "tce-load " + (string)chooser.value();
int results = system(command.c_str());
if (results == 0)
{
   string msg = (string)chooser.value() + " successfully loaded!";
   fl_message(msg.c_str());
} else
   fl_message("Unable to load extension.");
}

void tabs_callback(Fl_Widget*, void* userdata) {
  if (brw_extn->value())
{
   int results;
   select_extn = brw_extn->text(brw_extn->value());
   if (tab_files->visible())
   {
     string select_extn_file = select_extn + (string)".list";
     string command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_list->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
   
   if (tab_depends->visible())
   {
     string select_extn_file = select_extn + (string)".dep";
     string command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_dep->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
}
}

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Install Local", 0,  (Fl_Callback*)local_btn_callback, (void*)("File/Local"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Install Optional", 0,  (Fl_Callback*)local_btn_callback, (void*)("File/Optional"), 1, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)btn_callback, (void*)("quit"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Connect", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"TCE", 0,  (Fl_Callback*)btn_callback, (void*)("tce"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"TCZ", 0,  (Fl_Callback*)btn_callback, (void*)("tcz"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Box *box_extensions=(Fl_Box *)0;

Fl_Browser *brw_extn=(Fl_Browser *)0;

Fl_Tabs *tabs=(Fl_Tabs *)0;

Fl_Group *tab_info=(Fl_Group *)0;

Fl_Browser *brw_info=(Fl_Browser *)0;

Fl_Group *tab_files=(Fl_Group *)0;

Fl_Browser *brw_list=(Fl_Browser *)0;

Fl_Group *tab_depends=(Fl_Group *)0;

Fl_Browser *brw_dep=(Fl_Browser *)0;

Fl_Button *btn_install=(Fl_Button *)0;

Fl_Button *btn_download=(Fl_Button *)0;

Fl_Input *search_field=(Fl_Input *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(685, 405);
    w = o;
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 685, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { box_extensions = new Fl_Box(40, 24, 100, 16, "Extensions");
      box_extensions->deactivate();
    } // Fl_Box* box_extensions
    { brw_extn = new Fl_Browser(0, 45, 200, 325);
      brw_extn->type(1);
      brw_extn->textfont(4);
      brw_extn->callback((Fl_Callback*)brw_extn_callback);
    } // Fl_Browser* brw_extn
    { tabs = new Fl_Tabs(205, 20, 475, 350);
      tabs->callback((Fl_Callback*)tabs_callback);
      { tab_info = new Fl_Group(205, 45, 475, 325, "Info");
        tab_info->when(FL_WHEN_CHANGED);
        tab_info->hide();
        tab_info->deactivate();
        { brw_info = new Fl_Browser(210, 50, 470, 318);
          brw_info->textfont(4);
        } // Fl_Browser* brw_info
        tab_info->end();
      } // Fl_Group* tab_info
      { tab_files = new Fl_Group(205, 45, 475, 325, "Files");
        tab_files->when(FL_WHEN_CHANGED);
        tab_files->hide();
        tab_files->deactivate();
        { brw_list = new Fl_Browser(210, 50, 470, 318);
          brw_list->textfont(4);
        } // Fl_Browser* brw_list
        tab_files->end();
      } // Fl_Group* tab_files
      { tab_depends = new Fl_Group(205, 45, 475, 325, "Depends");
        tab_depends->deactivate();
        { brw_dep = new Fl_Browser(210, 50, 470, 318);
          brw_dep->textfont(4);
        } // Fl_Browser* brw_dep
        tab_depends->end();
      } // Fl_Group* tab_depends
      tabs->end();
    } // Fl_Tabs* tabs
    { btn_install = new Fl_Button(5, 374, 110, 25, "Install Selected");
      btn_install->callback((Fl_Callback*)btn_callback, (void*)("install"));
      btn_install->deactivate();
    } // Fl_Button* btn_install
    { btn_download = new Fl_Button(120, 374, 110, 25, "Download Only");
      btn_download->callback((Fl_Callback*)btn_callback, (void*)("download"));
      btn_download->deactivate();
    } // Fl_Button* btn_download
    { search_field = new Fl_Input(288, 375, 392, 21, "Search");
      search_field->callback((Fl_Callback*)btn_callback, (void*)("search"));
      search_field->when(FL_WHEN_ENTER_KEY);
      search_field->deactivate();
    } // Fl_Input* search_field
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  ifstream download_dir_file("/opt/.tce_dir");
getline(download_dir_file,download_dir);
download_dir_file.close();
string command = "ls -d " + download_dir +"/optional 2>/dev/null";
int results = system(command.c_str());
if (results == 0)
   menuitem_optional->activate();
  w->show(argc, argv);
  return Fl::run();
}
