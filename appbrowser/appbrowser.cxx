// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "appbrowser.h"
// (c) Robert Shingledecker 2008, 2009
#include <iostream>
#include <fstream>
#include <string>
#include <FL/fl_message.H>
#include <FL/Fl_File_Chooser.H>
using namespace std;
static string download_dir, last_dir; 
static string select_extn; 
static string repository; 
static ifstream ifaberr; 
static string aberr; 
static string command, msg; 

void btn_callback(Fl_Widget *, void* userdata) {
  if (userdata == "tcz")
{
   repository = (const char*) userdata;
   window->cursor(FL_CURSOR_WAIT);
   Fl::flush();
   command = "/usr/bin/tce-fetch.sh info.lst.gz";
   int results = system(command.c_str());
   window->cursor(FL_CURSOR_DEFAULT);
   Fl::flush();
   if (results == 0 )
   {
      system("gunzip info.lst.gz");
      brw_extn->load("info.lst");
      btn_install->deactivate();
      btn_download->deactivate();
      box_extensions->activate();
      btn_search->activate();
      search_field->activate();                                              
      system("rm -f info.lst"); 
    } else
      fl_message("Connection error, check network or mirror.");  
} else if (userdata == "install")
{
   string loadit = "tce-load -w -i ";
   loadit = loadit + select_extn;
   int results = system(loadit.c_str());
   ifstream ifaberr("/tmp/aberr");
   msg = "";
   getline(ifaberr,aberr);
   while (ifaberr)     
   {
     msg = msg + aberr + "\n";
     getline(ifaberr,aberr);
   }
   ifaberr.close();
     fl_message(msg.c_str());  
   if (results == 0 ) system("/usr/bin/wbar.sh");
} else if (userdata == "download")
{
   string grabit = "tce-load -w " + select_extn;
// cout << grabit << endl;
   int results = system(grabit.c_str());
   ifstream ifaberr("/tmp/aberr");
   msg = " ";
   getline(ifaberr,aberr);
   while (ifaberr) 
   {
     msg = msg + aberr + "\n";
     getline(ifaberr,aberr);
   }
   ifaberr.close();
   fl_message(msg.c_str());  
   if (results == 0 ) system("/usr/bin/wbar.sh");
} else if (userdata == "toggle")
{
   brw_extn->clear();
   search_field->value("");
   if (btn_search->label() == "Search")
      btn_search->label("Provides");
   else
      btn_search->label("Search");
} else if (userdata == "search")
{
   if (btn_search->label() == "Search")
      command = "/usr/bin/search.sh";
   else
      command = "/usr/bin/provides.sh";
      
  window->cursor(FL_CURSOR_WAIT);
  Fl::flush();
  command = command + " " + (string)search_field->value();
  int results = system(command.c_str());
  window->cursor(FL_CURSOR_DEFAULT);
  Fl::flush();
  if (results == 0 )
  {
    brw_extn->load("info.lst");
    btn_install->deactivate();
    btn_download->deactivate();
    btn_search->activate();
    search_field->activate();                                              
    system("rm -f info.lst");
  } 
} else if (userdata == "quit")
  {
    system("/usr/bin/wbar.sh");
    ofstream last_dir_fout("/opt/.appbrowser",ios::out|ios::out);
    if ( last_dir_fout.is_open())
    {
       last_dir_fout << last_dir << endl;
       last_dir_fout.close();
    }
    exit(0);
  }
}

void brw_extn_callback(Fl_Widget *, void *) {
  if (brw_extn->value())
{
   select_extn = brw_extn->text(brw_extn->value());
   string select_extn_file = select_extn + (string)".info";
   command = "/usr/bin/tce-fetch.sh " + select_extn_file;
   int results = system(command.c_str());
   if (results == 0)
   {
      brw_info->load(select_extn_file.c_str());
      command = "rm -f " + select_extn_file;
      system(command.c_str());
      btn_install->activate();
      btn_download->activate();
      tab_info->activate();
      tab_files->activate();
      brw_list->load("");
      tab_depends->activate();
      brw_dep->load("");
      tab_info->show();
   }
}
}

void local_btn_callback(Fl_Widget*, void* userdata) {
  string title = "Install Local Extension";
string selected;
string flags = " -i ";
string target_dir = last_dir;
if (userdata == "File/Optional")
{
   target_dir = last_dir + "/optional";
   title = "Install Optional Extension";
}   
Fl_File_Chooser chooser(target_dir.c_str(),"*.tcz",Fl_File_Chooser::SINGLE,title.c_str());
chooser.show();                                             
// Block until user picks something.
//     (The other way to do this is to use a callback())                                                      
while(chooser.shown())
    { Fl::wait(); }
// User hit cancel?
if ( chooser.value() == NULL )
   return; 
   
   
// cout << chooser.value() << endl;
selected = (string)chooser.value();

last_dir = chooser.directory();
// cout << last_dir << endl;

command = "tce-load" + flags + (string)chooser.value();
// cout << command << endl;
int results = system(command.c_str());
ifstream ifaberr("/tmp/aberr");
msg = "";
getline(ifaberr,aberr);
while (ifaberr) 
{
   msg = msg + aberr + "\n";
   getline(ifaberr,aberr);
}
ifaberr.close();
fl_message(msg.c_str());
}

void tabs_callback(Fl_Widget*, void* userdata) {
  if (brw_extn->value())
{
   int results;
   select_extn = brw_extn->text(brw_extn->value());
   if (tab_files->visible())
   {
     string select_extn_file = select_extn + (string)".list";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_list->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
   
   if (tab_depends->visible())
   {
     string select_extn_file = select_extn + (string)".dep";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_dep->load(select_extn_file.c_str());
        command = "rm -f " + select_extn_file;
        system(command.c_str());
     }
   }
}
}

Fl_Double_Window *window=(Fl_Double_Window *)0;

Fl_Menu_Item menu_[] = {
 {"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Connect to Repository", 0,  (Fl_Callback*)btn_callback, (void*)("tcz"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Install Local Extension", 0,  (Fl_Callback*)local_btn_callback, (void*)("File/Local"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Toggle Search/Provides", 0,  (Fl_Callback*)btn_callback, (void*)("toggle"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0,  (Fl_Callback*)btn_callback, (void*)("quit"), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Box *box_extensions=(Fl_Box *)0;

Fl_Browser *brw_extn=(Fl_Browser *)0;

Fl_Tabs *tabs=(Fl_Tabs *)0;

Fl_Group *tab_info=(Fl_Group *)0;

Fl_Browser *brw_info=(Fl_Browser *)0;

Fl_Group *tab_files=(Fl_Group *)0;

Fl_Browser *brw_list=(Fl_Browser *)0;

Fl_Group *tab_depends=(Fl_Group *)0;

Fl_Browser *brw_dep=(Fl_Browser *)0;

Fl_Button *btn_install=(Fl_Button *)0;

Fl_Button *btn_download=(Fl_Button *)0;

Fl_Button *btn_search=(Fl_Button *)0;

Fl_Input *search_field=(Fl_Input *)0;

int main(int argc, char **argv) {
  { window = new Fl_Double_Window(685, 405, "Appbrowser");
    window->callback((Fl_Callback*)btn_callback, (void*)("quit"));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 685, 20);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { box_extensions = new Fl_Box(40, 24, 100, 16, "Extensions");
      box_extensions->deactivate();
    } // Fl_Box* box_extensions
    { brw_extn = new Fl_Browser(0, 45, 200, 325);
      brw_extn->type(1);
      brw_extn->textfont(4);
      brw_extn->callback((Fl_Callback*)brw_extn_callback);
    } // Fl_Browser* brw_extn
    { tabs = new Fl_Tabs(205, 20, 475, 350);
      tabs->callback((Fl_Callback*)tabs_callback);
      { tab_info = new Fl_Group(205, 45, 475, 325, "Info");
        tab_info->when(FL_WHEN_CHANGED);
        tab_info->hide();
        tab_info->deactivate();
        { brw_info = new Fl_Browser(210, 50, 470, 318);
          brw_info->textfont(4);
        } // Fl_Browser* brw_info
        tab_info->end();
      } // Fl_Group* tab_info
      { tab_files = new Fl_Group(205, 45, 475, 325, "Files");
        tab_files->when(FL_WHEN_CHANGED);
        tab_files->hide();
        tab_files->deactivate();
        { brw_list = new Fl_Browser(210, 50, 470, 318);
          brw_list->textfont(4);
        } // Fl_Browser* brw_list
        tab_files->end();
      } // Fl_Group* tab_files
      { tab_depends = new Fl_Group(205, 45, 475, 325, "Depends");
        tab_depends->deactivate();
        { brw_dep = new Fl_Browser(210, 50, 470, 318);
          brw_dep->textfont(4);
        } // Fl_Browser* brw_dep
        tab_depends->end();
      } // Fl_Group* tab_depends
      tabs->end();
    } // Fl_Tabs* tabs
    { btn_install = new Fl_Button(10, 374, 50, 25, "Install ");
      btn_install->callback((Fl_Callback*)btn_callback, (void*)("install"));
      btn_install->deactivate();
    } // Fl_Button* btn_install
    { btn_download = new Fl_Button(65, 374, 90, 25, "OnDemand");
      btn_download->tooltip("Downloads to optional directory.");
      btn_download->callback((Fl_Callback*)btn_callback, (void*)("download"));
      btn_download->deactivate();
    } // Fl_Button* btn_download
    { btn_search = new Fl_Button(210, 375, 70, 25, "Search");
      btn_search->callback((Fl_Callback*)btn_callback, (void*)("toggle"));
      btn_search->deactivate();
    } // Fl_Button* btn_search
    { search_field = new Fl_Input(285, 375, 392, 25);
      search_field->labeltype(FL_NO_LABEL);
      search_field->callback((Fl_Callback*)btn_callback, (void*)("search"));
      search_field->when(FL_WHEN_ENTER_KEY);
      search_field->deactivate();
    } // Fl_Input* search_field
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
  ifstream download_dir_file("/opt/.tce_dir");
getline(download_dir_file,download_dir);
download_dir_file.close();

last_dir = download_dir + "/optional";   
ifstream last_dir_file("/opt/.appbrowser");
if ( last_dir_file.is_open() )
{
   getline(last_dir_file,last_dir);
   last_dir_file.close();
}
  window->show(argc, argv);
  return Fl::run();
}
