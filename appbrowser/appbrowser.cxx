// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "appbrowser.h"
// (c) Robert Shingledecker 2008-2010
#include <iostream>
#include <fstream>
#include <string>
#include <FL/fl_message.H>
#include <FL/Fl_File_Chooser.H>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <signal.h>
#include <locale.h>
using namespace std;
static FILE *G_in = NULL; // how we read the child
static int   G_out = 0; // how we write to the child
static string download_dir, last_dir; 
static string select_extn; 
static string repository; 
static ifstream ifaberr; 
static string aberr; 
static string mode, command, msg, url; 

static void cursor_normal() {
  window->cursor(FL_CURSOR_DEFAULT);
Fl::flush();
}

static void cursor_wait() {
  window->cursor(FL_CURSOR_WAIT);
Fl::flush();
}

static void HandleInput_CB(int, void *data) {
  static int x = 0;
static char s[1024];
char c = fgetc(G_in);            // read one char at a time
if ( c == '\n' || x == (sizeof(s)-1) )
{
  s[x] = 0;
  status_out->value(s);
  string result = s;
  int loc = result.find((select_extn + ": OK"));
  if (loc != string::npos)
  {
    status_out->color(175);
  }
  x = 0;
} else
  { s[x++] = c; }
}

static void fetch_extension() {
  status_out->activate();
status_out->color(FL_WHITE);
status_out->value(command.c_str());
command = command + "\n";
write(G_out, command.c_str(), command.length());
Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);
}

static void btn_callback(Fl_Widget *, void* userdata) {
  if (userdata == "tcz")
{
   mode = "tcz";
   status_out->value("");
   status_out->label("Status");
   status_out->deactivate();
   repository = (const char*) userdata;
   cursor_wait();
   command = "/usr/bin/tce-fetch.sh info.lst.gz";
   int results = system(command.c_str());
   cursor_normal();
   if (results == 0 )
   {
      system("gunzip info.lst.gz");
      brw_select->load("info.lst");
      btn_go->deactivate();
      box_select->label("Select Extension");
      box_select->activate();
      search_choices->activate();
      search_field->activate();                                              
      unlink("info.lst");
    } else
      fl_message("Connection error, check network or mirror.");
} else if (userdata == "go")
{
   int action = install_choices->value();
   string action_type;
   switch(action)
   {
      case 0 : action_type="wi";
               break;
      case 1 : action_type="wo";
               break;
      case 2 : action_type="wil";
               break;
      case 3 : action_type="w";
               break;
      default: mode="w";
   }
   command = "tce-load -" + action_type + " " + select_extn;
   cout << command << endl;
   fetch_extension();          
   
} else if (userdata == "search")
{
   if (search_choices->text() == "Search")
      command = "/usr/bin/search.sh";
   else
      command = "/usr/bin/provides.sh";
      
  cursor_wait();
  command = command + " " + (string)search_field->value();
  int results = system(command.c_str());
  cursor_normal();
  if (results == 0 )
  {
    brw_select->load("info.lst");
    btn_go->deactivate();
    search_choices->activate();
    search_field->activate();                                              
    unlink("info.lst");
  } 
} else if (userdata == "quit")
  {
    ofstream last_dir_fout("/opt/.appbrowser",ios::out|ios::out);
    if ( last_dir_fout.is_open())
    {
       last_dir_fout << last_dir << endl;
       last_dir_fout.close();
    }
    command = "quit\n";
    write(G_out, command.c_str(), command.length());
    unlink("ab2tce.fifo");
    exit(0);

  }
}

static void brw_select_callback(Fl_Widget *, void *) {
  if (brw_select->value())
{
   select_extn = brw_select->text(brw_select->value());
   if ( mode == "tcz" )
   {
      string select_extn_file = select_extn + (string)".info";
      command = "/usr/bin/tce-fetch.sh " + select_extn_file;
      int results = system(command.c_str());
      if (results == 0)
      {
         brw_info->load(select_extn_file.c_str());
         unlink(select_extn_file.c_str());
         btn_go->activate();
/*         
         btn_install->activate();
         btn_download->activate();
         btn_ondemand->activate();
*/         
         tabs->activate();
         tab_info->activate();
         tab_files->activate();
         brw_list->load("");
         tab_depends->activate();
         tab_size->activate();
         brw_dep->load("");
         brw_size->load("");
         tab_info->show();
      } 
   }
   if ( mode == "mirror" )
   {
      status_out->value(select_extn.c_str());
      url = status_out->value();
     ofstream fout("/opt/tcemirror", ios::out|ios::out);
     if (! fout.is_open())
     {
       cerr << "Can't open /opt/tcemirror for output!" << endl;
       exit(EXIT_FAILURE);
     }
     fout << url << endl;
     fout.close();      
   }
}
}

static void local_btn_callback(Fl_Widget*, void* userdata) {
  string title = "Install Local Extension";
string selected;
string flags = " -i ";
string target_dir = last_dir;
if (userdata == "File/Optional")
{
   target_dir = last_dir + "/optional";
   title = "Install Optional Extension";
}   
Fl_File_Chooser chooser(target_dir.c_str(),"*.tcz",Fl_File_Chooser::SINGLE,title.c_str());
chooser.show();                                             
// Block until user picks something.
//     (The other way to do this is to use a callback())                                                      
while(chooser.shown())
    { Fl::wait(); }
// User hit cancel?
if ( chooser.value() == NULL )
   return; 
   
   
// cout << chooser.value() << endl;
selected = (string)chooser.value();

last_dir = chooser.directory();
// cout << last_dir << endl;

command = "tce-load" + flags + (string)chooser.value();
// cout << command << endl;

status_out->activate();
status_out->color(FL_WHITE);
status_out->value(command.c_str());
command = command + "\n";
write(G_out, command.c_str(), command.length());
Fl::add_fd(fileno(G_in), HandleInput_CB, (void*)&status_out);
}

static void mirror_btn_callback(Fl_Widget*, void* userdata) {
  //Get Mirror
mode = "mirror";
cursor_wait();
ifstream fin("/opt/tcemirror");
getline(fin,url);
fin.close();
brw_info->clear();
tabs->deactivate();
status_out->label("  URL:");
status_out->value(url.c_str());
status_out->activate();
command = "/usr/bin/tce-fetch.sh mirrors.lst";
int results = system(command.c_str());
cursor_normal();
if ( results == 0)
{
   brw_select->load("mirrors.lst");
   box_select->label("Select Mirror");
   box_select->activate();
   unlink("mirrors.lst");
} else
   fl_message("Connection error, check network or ibiblio");
}

static void tabs_callback(Fl_Widget*, void* userdata) {
  if (brw_select->value())
{
   int results;
   select_extn = brw_select->text(brw_select->value());
   if (tab_files->visible())
   {
     string select_extn_file = select_extn + (string)".list";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     if (results == 0)
     {
        brw_list->load(select_extn_file.c_str());
        unlink(select_extn_file.c_str());
     }
   }
   
   if (tab_depends->visible())
   {
     cursor_wait();
     string select_extn_file = select_extn + (string)".tree";
     command = "/usr/bin/tce-fetch.sh " + select_extn_file;
     results = system(command.c_str());
     cursor_normal();
     if (results == 0)
     {
        brw_dep->load(select_extn_file.c_str());
        unlink(select_extn_file.c_str());
     }
   }
   if (tab_size->visible())
   {
     cursor_wait();

     command = "/usr/bin/tce-size " + select_extn;
     FILE *pipe = popen(command.c_str(),"r");
     char *mbuf = (char *) calloc(PATH_MAX,sizeof(char));

     if (pipe) {
     	brw_size->clear();
	while (fgets(mbuf,PATH_MAX,pipe)) {
	        string line(mbuf);
        	if (line.substr(0,1) == "+") { line = "@B17" + line; }
        	brw_size->add(line.c_str());
        	Fl::flush();
	}

	pclose(pipe);
	free(mbuf);
     }

     cursor_normal();
   }
}
}

Fl_Double_Window *window=(Fl_Double_Window *)0;

Fl_Choice *search_choices=(Fl_Choice *)0;

Fl_Menu_Item menu_search_choices[] = {
 {gettext("Search"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Provides"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Input *search_field=(Fl_Input *)0;

Fl_Box *box_select=(Fl_Box *)0;

Fl_Browser *brw_select=(Fl_Browser *)0;

Fl_Tabs *tabs=(Fl_Tabs *)0;

Fl_Group *tab_info=(Fl_Group *)0;

Fl_Browser *brw_info=(Fl_Browser *)0;

Fl_Group *tab_files=(Fl_Group *)0;

Fl_Browser *brw_list=(Fl_Browser *)0;

Fl_Group *tab_depends=(Fl_Group *)0;

Fl_Browser *brw_dep=(Fl_Browser *)0;

Fl_Group *tab_size=(Fl_Group *)0;

Fl_Browser *brw_size=(Fl_Browser *)0;

Fl_Choice *install_choices=(Fl_Choice *)0;

Fl_Menu_Item menu_install_choices[] = {
 {gettext("OnBoot"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("OnDemand"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Download + Load"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {gettext("Download Only"), 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Button *btn_go=(Fl_Button *)0;

Fl_Output *status_out=(Fl_Output *)0;

int main(int argc, char **argv) {
  setlocale(LC_ALL, "");
bindtextdomain("tinycore", "/usr/local/share/locale");
textdomain("tinycore");

ifstream download_dir_file("/opt/.tce_dir");
getline(download_dir_file,download_dir);
download_dir_file.close();

last_dir = download_dir + "/optional";   
ifstream last_dir_file("/opt/.appbrowser");
if ( last_dir_file.is_open() )
{
   getline(last_dir_file,last_dir);
   last_dir_file.close();
}

// Make fifo
unlink("/tmp/ab2tce.fifo");
if ( mkfifo("/tmp/ab2tce.fifo", 0666) < 0 ) {
    perror("mkfifo(/tmp/ab2tce.fifo)");
    exit(1);
}

// Popen child for reading, set child to read fifo
if ( ( G_in = popen("ab2tce.sh < /tmp/ab2tce.fifo", "r") ) == NULL ) {
    perror("popen failed");
    exit(1);
}
setbuf(G_in, NULL);                         // disable buffering

// Now open fifo
if ( ( G_out = open("/tmp/ab2tce.fifo", O_WRONLY) ) < 0 ) {
    perror("open(/tmp/ab2tce.fifo) for write failed");
    unlink("/tmp/ab2tce.fifo");
    exit(1);
}
  { window = new Fl_Double_Window(685, 395, gettext("Appbrowser"));
    window->callback((Fl_Callback*)btn_callback, (void*)("quit"));
    { Fl_Button* o = new Fl_Button(0, 0, 68, 20, gettext("Connect"));
      o->callback((Fl_Callback*)btn_callback, (void*)("tcz"));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(69, 0, 65, 20, gettext("Local"));
      o->callback((Fl_Callback*)local_btn_callback, (void*)("File/Local"));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(135, 0, 65, 20, gettext("Mirrors"));
      o->callback((Fl_Callback*)mirror_btn_callback, (void*)("mirror"));
    } // Fl_Button* o
    { search_choices = new Fl_Choice(206, 0, 93, 20);
      search_choices->down_box(FL_BORDER_BOX);
      search_choices->deactivate();
      search_choices->menu(menu_search_choices);
    } // Fl_Choice* search_choices
    { search_field = new Fl_Input(300, 0, 385, 20);
      search_field->labeltype(FL_NO_LABEL);
      search_field->callback((Fl_Callback*)btn_callback, (void*)("search"));
      search_field->when(FL_WHEN_ENTER_KEY);
      search_field->deactivate();
    } // Fl_Input* search_field
    { box_select = new Fl_Box(40, 24, 120, 16);
      box_select->deactivate();
    } // Fl_Box* box_select
    { brw_select = new Fl_Browser(0, 45, 200, 325);
      brw_select->type(1);
      brw_select->textfont(4);
      brw_select->callback((Fl_Callback*)brw_select_callback);
    } // Fl_Browser* brw_select
    { tabs = new Fl_Tabs(205, 20, 475, 350);
      tabs->callback((Fl_Callback*)tabs_callback);
      { tab_info = new Fl_Group(205, 45, 475, 325, gettext("Info"));
        tab_info->when(FL_WHEN_CHANGED);
        tab_info->hide();
        tab_info->deactivate();
        { brw_info = new Fl_Browser(210, 50, 470, 318);
          brw_info->textfont(4);
        } // Fl_Browser* brw_info
        tab_info->end();
      } // Fl_Group* tab_info
      { tab_files = new Fl_Group(205, 45, 475, 325, gettext("Files"));
        tab_files->when(FL_WHEN_CHANGED);
        tab_files->hide();
        tab_files->deactivate();
        { brw_list = new Fl_Browser(210, 50, 470, 318);
          brw_list->textfont(4);
        } // Fl_Browser* brw_list
        tab_files->end();
      } // Fl_Group* tab_files
      { tab_depends = new Fl_Group(205, 45, 475, 325, gettext("Depends"));
        tab_depends->deactivate();
        { brw_dep = new Fl_Browser(210, 50, 470, 318);
          brw_dep->textfont(4);
        } // Fl_Browser* brw_dep
        tab_depends->end();
      } // Fl_Group* tab_depends
      { tab_size = new Fl_Group(205, 45, 475, 325, gettext("Size"));
        tab_size->hide();
        tab_size->deactivate();
        { brw_size = new Fl_Browser(210, 50, 470, 318);
          brw_size->textfont(4);
        } // Fl_Browser* brw_size
        tab_size->end();
      } // Fl_Group* tab_size
      tabs->end();
    } // Fl_Tabs* tabs
    { install_choices = new Fl_Choice(5, 373, 140, 20);
      install_choices->down_box(FL_BORDER_BOX);
      install_choices->menu(menu_install_choices);
    } // Fl_Choice* install_choices
    { btn_go = new Fl_Button(150, 373, 44, 20, gettext("Go"));
      btn_go->callback((Fl_Callback*)btn_callback, (void*)("go"));
      btn_go->deactivate();
    } // Fl_Button* btn_go
    { status_out = new Fl_Output(250, 373, 430, 20, gettext("Status"));
      status_out->deactivate();
    } // Fl_Output* status_out
    window->end();
    window->resizable(window);
  } // Fl_Double_Window* window
  window->show(argc, argv);
  return Fl::run();
}
