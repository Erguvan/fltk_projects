# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function mygettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008-2012} {} 

decl {\#include <iostream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <cstdlib>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <sys/types.h>} {} 

decl {\#include <sys/stat.h>} {} 

decl {\#include <fcntl.h>} {} 

decl {\#include <signal.h>} {} 

decl {\#include <locale.h>} {} 

decl {\#include <unistd.h>} {} 

decl {\#include <string.h>} {} 

decl {using namespace std;} {} 

decl {string tcedir, target_dir, last_dir;} {} 

decl {string select_extn, select_results, select_extn_file;} {} 

decl {string repository;} {} 

decl {ifstream ifappserr;} {} 

decl {string appserr,hilite;} {} 

decl {int results, locales_set=0;} {} 

decl {string mode, command, msg, mirror, err_extn;} {} 

decl {string option_type, report_type, update_type;} {} 

decl {string copy2fsList, copy2fsFlag, onbootName, onbootList, onbootTitle;} {} 

decl {Fl_Text_Buffer *txtBuffer = new Fl_Text_Buffer;} {} 

decl {void errhandler(const string &str);} {} 

Function {cursor_normal()} {private return_type void
} {
  code {window->cursor(FL_CURSOR_DEFAULT);
Fl::flush();} {}
} 

Function {cursor_wait()} {private return_type void
} {
  code {Fl::redraw();
window->cursor(FL_CURSOR_WAIT);
Fl::flush();} {}
} 

Function {mygettext(const char *msgid)} {private return_type {char *}
} {
  code {if (!locales_set) {

setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");

locales_set=1;

}

return gettext(msgid);} {}
} 

Function {auditView()} {open private return_type void
} {
  code {grpBrowse->hide();
grpMulti->hide();
menuBarDepends->hide();
brwExtn->clear();
brwMulti->clear();
brwResults->clear();
boxExtn->label("Select");
boxResults->label("Results");
report_type.empty();
btnSingle->label("Add Item");
btnResults->label("Delete Item");
btnSingle->deactivate();
btnResults->deactivate();
btnSingle->hide();
btnResults->hide();
grpAudit->show();
grpSingle->show();
Fl::flush();} {}
} 

Function {browseView()} {private return_type void
} {
  code {grpAudit->hide();
menuBarDepends->hide();
grpMulti->hide();
grpBrowse->show();
Fl::flush();} {}
} 

Function {protectChr()} {return_type void
} {
  code {int p = 0;
int s = 0;
do
{
   p = select_extn.find("+",p+s);
   if ( p > 0 )
   {
      select_extn.replace(p,1,"\\\\+");
      s = 2;
   }
} while ( p > 0 );} {}
} 

Function {displayTabData()} {return_type void
} {
  code {txtBuffer->loadfile("");
FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
if (pipe)
{
   while(fgets(mbuf,PATH_MAX,pipe))
   {
      string line(mbuf);
      txtBuffer->append(line.c_str());
      Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}} {}
} 

Function {loadBrwExtnData()} {return_type void
} {
  code {brwExtn->clear();
FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
if (pipe)
{
   while(fgets(mbuf,PATH_MAX,pipe))
   {
      string line(mbuf);
      brwExtn->add(line.c_str());
      Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}} {}
} 

Function {loadBrwResultsData()} {return_type void
} {
  code {FILE *pipe = popen(command.c_str(),"r");
char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
if (pipe)
{
   while(fgets(mbuf,PATH_MAX,pipe))
   {
      string line(mbuf);
      brwResults->add(line.c_str());
      Fl::flush();
   }
   pclose(pipe);
   free(mbuf);
}} {}
} 

Function {fetch_extension()} {private return_type void
} {
  code {outputStatus->activate();
outputStatus->color(FL_WHITE);
outputStatus->value(command.c_str());
cursor_wait();
msg = select_extn;
command = "xterm -fg black -bg white +tr -g 80x5 -e " + command;
system(command.c_str());

command = "busybox md5sum -cs " + select_extn + ".md5.txt";
results = system(command.c_str());

if (results == 0 )
{
  outputStatus->color(175);
  msg += + " OK.";
} else
  msg += " Failed.";
  
outputStatus->value(msg.c_str());  
cursor_normal();} {}
} 

Function {builddb()} {private return_type void
} {
  code {cursor_wait();
command = "tce-audit builddb " + target_dir +"/";
system(command.c_str());
string listfile = target_dir + "/tce.lst";
brwExtn->load(listfile.c_str());
brwExtn->remove(brwExtn->size());
brwResults->load("/tmp/audit_results.txt");
brwResults->remove(brwResults->size());
menu_nodepends->activate();
menu_notrequired->activate();
menu_auditall->activate();
menu_fetchmissing->activate();
menu_marked->activate();
menu_clearlst->activate();
boxResults->label("Results");
cursor_normal();} {}
} 

Function {errhandler(const string &str)} {private return_type void
} {
  Fl_Window errwindow {
    label {MD5SUM error}
    xywh {386 540 520 125} type Double hide
  } {
    Fl_Box errlabel {
      label {Md5sum error on}
      xywh {162 25 195 30}
    }
    Fl_Button {} {
      label {Remove and try again}
      callback {string cmd = "rm -f " + err_extn + "*";

system(cmd.c_str());

fetch_extension();
errwindow->hide();}
      xywh {15 70 160 35}
    }
    Fl_Button {} {
      label {Try to finish download}
      callback {string cmd = "zsync " + mirror + "3.x/tcz/" + err_extn + ".zsync";

int ret = system(cmd.c_str());
ret = WEXITSTATUS(ret);

if (ret == 0) fetch_extension();
else {

	// If zsync also fails, it's a bad hair
	// day for the network. Nothing we can do.

	outputStatus->value("Zsync failed.");

	cmd = "rm -f " + err_extn + "*";

	system(cmd.c_str());
}

errwindow->hide();}
      xywh {200 70 160 35}
    }
    Fl_Button {} {
      label Cancel
      callback {errwindow->hide();}
      xywh {385 70 115 35}
    }
  }
  code {errlabel->label(str.c_str());

err_extn = str;
err_extn.replace(0,9,""); // Yes, hardcoded magic value. Bad.

errwindow->show();} {}
} 

Function {menuCB(Fl_Widget *, void* userdata)} {open private return_type {static void}
} {
  code {report_type = (const char*)userdata;
if (userdata == "tcz")
{
   browseView();
   mode = "tcz";
   tabs->deactivate();
   txtBuffer->loadfile("");
   repository = (const char*) userdata;
   cursor_wait();
   unlink("info.lst");
   command = "tce-fetch.sh info.lst.gz";
   int results = system(command.c_str());
   cursor_normal();
   if (results == 0 )
   {
      system("gunzip -c info.lst.gz > info.lst");
      brwSelect->load("info.lst");
      brwSelect->remove(brwSelect->size());
      btnGo->deactivate();
      boxSelect->label("Select Remote Extension");
      boxSelect->activate();
      search_choices->activate();
      search_field->activate();                                              
    } else
      fl_message("Error, check network, mirror or writable extension directory.");
      
} else if (userdata == "LoadLocal" )
{
  auditView();
  btnSingle->label("Load");
  btnSingle->show();
  btnResults->hide();
  boxExtn->label("Select Local Extension");
  cursor_wait();
  command = "tce-status -u | sort -f";
  loadBrwExtnData();
  cursor_normal();
  
} else if (userdata == "onboot" )
{
  auditView();
  btnSingle->show();
  btnResults->show();
  target_dir = tcedir + "/optional/";
  cursor_wait();
  
  command = "ondemand -l";
  loadBrwExtnData();  
  
  onbootTitle = "On Boot Items (" + onbootName +")";
  boxResults->label(onbootTitle.c_str());
  brwResults->load(onbootList.c_str());
  brwResults->remove(brwResults->size());
  
  cursor_normal();
} else if (userdata == "ondemand" )
{
  auditView();
  btnSingle->show();
  btnResults->show();
  cursor_wait();
  command = "ondemand -lt";
  loadBrwExtnData();  
  
  boxResults->label("Current OnDemand Items");
  command = "ondemand -ct | sort -f";
  loadBrwResultsData();
  cursor_normal();
} else if (userdata == "md5s") 
{
   auditView();
   grpSingle->hide();
   btnMulti->deactivate();
   grpMulti->show();
   boxExtn->label("Select Md5s");
   Fl::flush();
   cursor_wait();
   command = "cd " + target_dir + " && ls *.md5.txt | sort -f > /tmp/apps_upd.lst";
   system(command.c_str());
   brwMulti->load("/tmp/apps_upd.lst");
   brwMulti->remove(brwMulti->size());
   cursor_normal();

} else if (userdata == "updates") 
{
   string line;
   auditView();
   boxExtn->label("Select Updates");
   grpSingle->hide();
   btnMulti->deactivate();
   grpMulti->show();
   Fl::flush();
   cursor_wait();

   brwResults->clear();
   command = "version -c";
   loadBrwResultsData();
   brwResults->add("Please Standby... Now checking your extensions.");

   command = "tce-update list " + target_dir;
   FILE *pipe = popen(command.c_str(),"r");
   char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
   if (pipe)
   {
      while(fgets(mbuf,PATH_MAX,pipe))
      {
         string line(mbuf);
         if (line.find("Error ") == string::npos ) {
            brwMulti->add(line.c_str());
            brwMulti->bottomline(brwMulti->size());
         } else { 
            brwResults->add(line.c_str());
            brwResults->bottomline(brwResults->size());
         }
         Fl::flush();
      }
      pclose(pipe);
      free(mbuf);
   }
   brwResults->add("Scan for updates completed.");    
   if ( brwMulti->size() >= 1 )
      btnMulti->deactivate();
   else {
      if ( brwResults->size() == 1 )
         brwResults->add("Extensions are current. No updates required.");
   }
   cursor_normal();
   Fl::flush(); 
   
   
} else if (userdata == "orphans") 
{
   string line;
   auditView();
   cursor_wait();
   brwResults->clear();

   command = "tce-status -o";
   loadBrwResultsData();
   brwResults->add("Scan for orphans complete.");    
   cursor_normal();
   Fl::flush();      
      
} else if (userdata == "unneeded") 
{
   string line;
   auditView();
   cursor_wait();
   brwResults->clear();

   command = "chkonboot.sh";
   loadBrwResultsData();
   cursor_normal();
   Fl::flush();      
      
} else if (userdata == "copy2fs")
{
   auditView();
   command = "ls "+ copy2fsFlag + " >/dev/null 2>&1";
   int results = system(command.c_str());
   if (results == 0)
   {
     command = "rm -f "+ copy2fsFlag;
     system(command.c_str());
     boxResults->label("copy2fs.flg removed.");
   } else
   {  
     command = "touch " + tcedir + "/copy2fs.flg";
     system(command.c_str());
     boxResults->label("copy2fs.flg set");
   }
} else if (userdata == "SelectiveCopy") 
{
   auditView();
   btnSingle->show();
   btnResults->show();
   boxExtn->label("Select to Copy");
   command = "ls " + target_dir + "|grep -E .tcz$ ";
   loadBrwExtnData();
   
   brwResults->load(copy2fsList.c_str());
   brwResults->remove(brwResults->size());
   boxResults->label("Current copy2fs.lst");
   option_type = (const char*) userdata;
   
} else if (userdata == "menuDepends")
  {
    auditView();
    mode = "depends";
    btnSingle->hide();
    btnResults->hide();
    grpMulti->hide();
    brwExtn->show();
    menuBarApps->hide();
    builddb();
    menu_dependson->deactivate();
    menu_requiredby->deactivate();
    menu_missing->deactivate();
    menu_delete->deactivate();
    menuBarDepends->show();
    
} else if (userdata == "quit")
  {
    if ( last_dir.compare(0,8,"/tmp/tce") != 0 )
    {
      ofstream last_dir_fout("/opt/.appbrowser",ios::out|ios::out);
      if ( last_dir_fout.is_open())
      {
        last_dir_fout << last_dir << endl;
        last_dir_fout.close();
      }
    }  
    command = "quit\\n";
    unlink("info.lst");
    unlink("info.lst.gz");
    unlink("/tmp/tags.lst");
    exit(0);

  }} {selected
  }
} 

Function {btnCB(Fl_Widget *, void* userdata)} {private return_type {static void}
} {
  code {if (userdata == "go")
{
   outputStatus->value("");
   outputStatus->label("Status");
   int action = install_choices->value();
   string action_type;
   switch(action)
   {
      case 0 : action_type="wi";
               break;
      case 1 : action_type="wo";
               break;
      case 2 : action_type="wil";
               break;
      case 3 : action_type="w";
               break;
      default: mode="w";
   }
   command = "tce-load -" + action_type + " " + select_extn;
   fetch_extension();
} else if (userdata == "setdrive")
{
   cursor_wait();
   command = "tce-setdrive -l";
   int results = system(command.c_str());
   cursor_normal();
   if (results == 0 )
   {
      mode = "setdrive";
      brwSelect->load("/tmp/tcesetdev");
      brwSelect->remove(brwSelect->size());
      boxSelect->label("Select for TCE dir.");
      boxSelect->activate();
      unlink("/tmp/tcesetdev");
   } else
     fl_message("No available drives found!");
     
} else if (userdata == "search")
{
  if (search_choices->text() == "Search")
     command = "search.sh";
  else if (search_choices->text() == "Tags")
     command = "search.sh -t";
  else
     command = "provides.sh";
  tabs->deactivate();
  txtBuffer->loadfile("");
  brwSelect->load(""); 
  cursor_wait();
  command = command + " " + (string)search_field->value();
  FILE *pipe = popen(command.c_str(),"r");
  char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
  if (pipe)
  {
     while(fgets(mbuf,PATH_MAX,pipe))
     {
        string line(mbuf);
        line = line.substr(0,line.length()-1);
        brwSelect->add(line.c_str());
        brwSelect->bottomline(brwSelect->size());
        Fl::flush();
     }
     pclose(pipe);
     free(mbuf);
  }
  search_field->value("");
  cursor_normal();
  btnGo->deactivate();
  search_choices->activate();
  search_field->activate();                                              
      
}} {}
} 

Function {brwSelectCB(Fl_Widget *, void *)} {private return_type {static void}
} {
  code {if (brwSelect->value())
{
   select_extn = brwSelect->text(brwSelect->value());
   if ( mode == "tcz" )
   {
      string select_extn_file = select_extn + (string)".info";
      command = "tce-fetch.sh " + select_extn_file;
      int results = system(command.c_str());
      if (results == 0)
      {
         txtBuffer->loadfile(select_extn_file.c_str());

         unlink(select_extn_file.c_str());
         btnGo->activate();
         
         tabs->activate();
         infoTab->activate();
         filesTab->activate();
         dependsTab->activate();
         sizeTab->activate();
         infoTab->show();
      } 
   }
   if ( mode == "mirror" )
   {
     mirror = select_extn;
     outURI->value(mirror.c_str());
     ofstream fout("/opt/tcemirror", ios::out|ios::out);
     if (! fout.is_open())
     {
       cerr << "Can't open /opt/tcemirror for output!" << endl;
       exit(EXIT_FAILURE);
     }
     fout << mirror << endl;
     fout.close();      
   }
   if ( mode == "setdrive" )
   {
      command = "tce-setdrive -s " + select_extn;
      int results = system(command.c_str());
      if (results == 0)
      {
         target_dir = select_extn + "/tce";
         brwSelect->clear();
         boxSelect->label("");
         target_dir += "/optional";
         outputStatus->color(FL_WHITE);
         outputStatus->value((target_dir).c_str());
         btn_tce->deactivate();         
      }
   }
}} {}
} 

Function {mirrorCB(Fl_Widget*, void*)} {private return_type {static void}
} {
  code {mode = "mirror";
browseView();
tabs->deactivate();
search_choices->deactivate();
search_field->deactivate();
system("cat /opt/localmirrors /usr/local/share/mirrors > /tmp/mirrors 2>/dev/null");
brwSelect->load("/tmp/mirrors");
if ( brwSelect->size() == 1)
  fl_message("Must load mirrors.tcz extension or have /opt/localmirrors in order to use this feature.");
else {
   brwSelect->remove(brwSelect->size());
   boxSelect->label("Select Mirror");
   boxSelect->activate();
}} {}
} 

Function {tabsGroupCB(Fl_Widget*, void*)} {private return_type {static void}
} {
  code {if (brwSelect->value())
{
   cursor_wait();
   select_extn = brwSelect->text(brwSelect->value());
   
   if (infoTab->visible())
   {
     select_extn_file = select_extn + (string)".info";
     command = "tce-fetch.sh -O " + select_extn_file;
     displayTabData();
   }
   
   if (filesTab->visible())
   {
     select_extn_file = select_extn + (string)".list";
     command = "tce-fetch.sh -O " + select_extn_file;
     displayTabData();
   }
   
   if (dependsTab->visible())
   {
     select_extn_file = select_extn + (string)".tree";
     command = "tce-fetch.sh -O " + select_extn_file;
     displayTabData();
   }
   if (sizeTab->visible())
   {
     command = "tce-size " + select_extn;
     displayTabData();
   }
   cursor_normal();
}} {}
} 

Function {dependsCB(Fl_Widget *, void* userdata)} {return_type {static void}
} {
  code {option_type = "";
report_type = (const char*) userdata;
btnResults->hide();

if (userdata == "updatedeps")
{
   cursor_wait();
   command = "tce-audit updatedeps " + target_dir +"/";
   system(command.c_str());
   cursor_normal();
} else if (userdata == "builddb")
{
   cursor_wait();
   builddb();
   cursor_normal();
} else if (userdata == "dependson" or userdata == "requiredby" or userdata == "audit") 
{
   string loadit = "tce-audit " + report_type + " " + target_dir + "/" + select_extn;
   int results = system(loadit.c_str());
   if (results == 0 )
   {
      brwResults->load("/tmp/audit_results.txt");
      brwResults->remove(brwResults->size());
   } else {
      fl_message("error detected!");
   }
} else if (userdata == "auditall" or userdata == "nodepends" or userdata == "notrequired")
{
   cursor_wait();
   boxResults->label("Results");
   menu_delete->deactivate();
   menu_dependson->deactivate();
   menu_requiredby->deactivate();
   menu_missing->deactivate();
   command = "tce-audit " + report_type + " " + target_dir + "/";
   int results = system(command.c_str());
   if (results == 0 )
   {
      brwResults->load("/tmp/audit_results.txt");
      brwResults->remove(brwResults->size());
   } else {
      ifstream ifappserr("/tmp/appserr");
      msg = "Error: ";
      getline(ifappserr,appserr);
      while (ifappserr) 
      {
         msg = msg + appserr + "\\n";
         getline(ifappserr,appserr);
      }
      ifappserr.close();
      fl_message(msg.c_str());
   }
   cursor_normal();
} else if (userdata == "fetchmissing")
{
   cursor_wait();
   brwResults->clear();
   command = "tce-audit fetchmissing";
   FILE *pipe = popen(command.c_str(),"r");
   char *mbuf = (char *)calloc(PATH_MAX,sizeof(char));
   if (pipe)
   {
      brwResults->clear();
      while(fgets(mbuf,PATH_MAX,pipe))
      {
         string line(mbuf);
         if (line.find("Error ") == string::npos )
            hilite = "";
         else
            hilite = "@B17";
         brwResults->add((hilite + line).c_str());
         brwResults->bottomline(brwResults->size());
         Fl::flush();
      }
      pclose(pipe);
      free(mbuf);
   }
   if ( brwResults->size() == 0 )
      brwResults->add("Dependency check complete. No missing dependencies found.");
   else
      brwResults->add("Missing dependencies fetch completed.");    

   cursor_normal();
} else if (userdata == "delete")
{
   protectChr();
   command = "tce-audit " + report_type + " " + target_dir + "/" + "\\""+ select_extn + "\\"";
   int results = system(command.c_str());
   if (results == 0 )
   {
      brwResults->load("/tmp/audit_results.txt");
      brwResults->remove(brwResults->size());
   } else {
      fl_message("error detected!");
   }
} else if (userdata == "display_marked")
{
     boxResults->label("Results");
     brwResults->load("/tmp/audit_marked.lst");
     brwResults->remove(brwResults->size());
} else if (userdata == "clearlst")
{
     command = "tce-audit " + report_type + " " + target_dir + "/" + select_extn;
     int results = system(command.c_str());
     if (results == 0 )
     { 
        brwResults->clear();
        boxResults->label("Marked for deletion cleared");
     }
} else if (userdata == "exit_depends")
{

    menuBarDepends->hide();
    brwExtn->clear();
    brwResults->clear();
    boxResults->label("Results");
    menuBarApps->show();
    btnSingle->show();
    btnResults->show();    mode="";
    Fl::flush();
}

menu_dependson->deactivate();
menu_requiredby->deactivate();
menu_missing->deactivate();
menu_delete->deactivate();
brwExtn->deselect();} {}
} 

Function {brwExtnCB(Fl_Widget *, void *)} {return_type {static void}
} {
  code {if (brwExtn->value())
{
  select_extn =brwExtn->text(brwExtn->value());
  if ( mode == "depends" )
  {
    boxResults->label(select_extn.c_str());
    menu_dependson->activate();
    menu_requiredby->activate();
    menu_missing->activate();
    menu_delete->activate();
    brwResults->clear();
  } else
      btnSingle->activate();
      
  brwResults->deselect();
  btnResults->deactivate();
}} {}
} 

Function {btnSingleCB(Fl_Widget *, void *)} {return_type {static void}
} {
  code {if (brwExtn->value())
{
   select_extn =brwExtn->text(brwExtn->value());
   bool not_duplicate = true;
   for ( int x=1; x <= brwResults->size(); x++ ) {
     if (!strcmp(brwResults->text(x),select_extn.c_str())) {
       not_duplicate = false;
     }
   }
   if ( option_type == "SelectiveCopy" && not_duplicate )
   {
     select_extn = select_extn.substr(0, select_extn.length()-1);
     command = "echo " + select_extn + " >> " + copy2fsList;
     system(command.c_str());
     brwResults->load(copy2fsList.c_str());
     brwResults->remove(brwResults->size());
   }
   if ( report_type == "onboot" && not_duplicate )
   {
     cursor_wait();
     select_extn = select_extn.substr(0, select_extn.length()-1);
     command = "echo " + select_extn + " >> " + onbootList;
     results = system(command.c_str());
     if (results == 0 )
     {
        brwExtn->remove(brwExtn->value());
        boxResults->label(onbootTitle.c_str());
        brwResults->load(onbootList.c_str());
        brwResults->remove(brwResults->size());
     }
     cursor_normal();
   }
      
   if ( report_type == "ondemand" )
   {
     cursor_wait();
     boxResults->label("Current OnDemand Items");
     command = "ondemand " + select_extn;
     results = system(command.c_str());
     if ( results == 0 ) 
     {
       brwExtn->remove(brwExtn->value());
       command = "ls -1 " + tcedir + "/ondemand | grep -v \\".img$\\" | sort -f";
       brwResults->clear();
       loadBrwResultsData();
     }
     cursor_normal();
   }
   
   if (report_type == "LoadLocal" )
   {
      command = "tce-load -i " + select_extn;
      loadBrwResultsData();
      msg = brwResults->text(brwResults->size());
      msg = msg.substr(msg.length()-3,2);
      if ( msg == "OK" )
      {
         brwExtn->remove(brwExtn->value());
         btnResults->deactivate();
      }
   }
}
btnSingle->deactivate();
brwExtn->deselect();} {}
} 

Function {brwMultiCB(Fl_Widget *, void *)} {return_type {static void}
} {
  code {btnMulti->activate();
cursor_wait();
brwResults->clear();
if ( report_type == "updates" ) { 
   for (int t=0; t<=brwMulti->size(); t++) {
      if (brwMulti->selected(t) ) {
         select_extn = brwMulti->text(t);
         
         select_extn_file = select_extn.substr(0,select_extn.size()-1);
         select_extn_file += ".info";
         command = "tce-fetch.sh -O " + select_extn_file;
         loadBrwResultsData();           
         continue;
      }
   }
}
cursor_normal();} {}
} 

Function {btnMultiCB(Fl_Widget *, void *)} {return_type {static void}
} {
  code {btnMulti->deactivate();
cursor_wait();
brwResults->clear();
for ( int t=0; t<=brwMulti->size(); t++ )
{
   if ( brwMulti->selected(t) )
   {
      select_extn = brwMulti->text(t);
      if ( report_type == "md5s" )
      {
         command = "cd " + target_dir +"/ && busybox md5sum -c " + select_extn + "> /dev/null";
         results = system(command.c_str());
         if ( results == 0 ) {
            msg = " OK";
            hilite = "";
         } else {
            msg = " FAILED";
            hilite = "@B17";
         }   
             
         brwResults->add((hilite + select_extn + msg).c_str());
         Fl::flush();      
      
      } else {
         brwResults->add(("Fetching " + select_extn).c_str());       
         string md5_file(select_extn,0,select_extn.size()-1);
         md5_file = md5_file + ".md5.txt";
         command = "tce-update update " + target_dir +"/" + md5_file;
         loadBrwResultsData();
         
      }
   }
}
brwMulti->deselect();
if (report_type == "md5s" )
   brwResults->add("Md5 checking complete.");
if (report_type == "updates" )
   brwResults->add("Updates complete. Reboot to effect.");
cursor_normal();} {}
} 

Function {brwResultsCB(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {if (brwResults->value())
{
  btnResults->deactivate();
  if ( report_type == "ondemand" or report_type == "onboot" or report_type == "SelectiveCopy" or report_type == "delete" or report_type == "display_marked" )
  {
     btnResults->show();
     btnResults->activate();
  }
  brwExtn->deselect();
  btnSingle->deactivate();
}} {}
} 

Function {btnResultsCB(Fl_Widget *, void *)} {open return_type {static void}
} {
  code {if (brwResults->value())
{
   select_results = brwResults->text(brwResults->value());
   if ( option_type == "SelectiveCopy" )
   {
     command = "sed -i '/" + select_results + "/d' " + copy2fsList;
     system(command.c_str());
     brwResults->load(copy2fsList.c_str());
     brwResults->remove(brwResults->size());
   }
   if (report_type == "delete" or report_type == "display_marked")
   {
     string target = select_results.substr(select_results.find_last_of("/")+1);
     command = "sed -i '/" + target + "/d' /tmp/audit_marked.lst";
     system(command.c_str());
     brwResults->load("/tmp/audit_marked.lst");
     brwResults->remove(brwResults->size());
   }
   if (report_type == "onboot")
   {
     cursor_wait();  
     command = "sed -i '/" + select_results + "/d' " + onbootList;
     system(command.c_str());
     brwResults->load(onbootList.c_str());
     brwResults->remove(brwResults->size());
     
     target_dir = tcedir + "/optional/";
     command = "ondemand -l ";
     loadBrwExtnData();
     cursor_normal();
   }  

   if (report_type == "ondemand")
   {
     cursor_wait();  
     command = "ondemand -r " + select_results;
     system(command.c_str());   
     command = "ondemand -l ";
     loadBrwExtnData();
     brwResults->clear();       
     command = "ondemand -ct";
     loadBrwResultsData();
     cursor_normal();
   }  
}
btnResults->deactivate();} {}
} 

Function {mirrorpicker()} {return_type void
} {
  code {system("mirrorpicker");

// reload mirror
ifstream mirror_fin("/opt/tcemirror");
getline(mirror_fin,mirror);
mirror_fin.close();} {}
} 

Function {} {open
} {
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore", "/usr/local/share/locale");
textdomain("tinycore");

ifstream mirror_fin("/opt/tcemirror");
getline(mirror_fin,mirror);
mirror_fin.close();


char buffer[1024];
int length;
chdir("/etc/sysconfig");
length = readlink("tcedir", buffer, sizeof(buffer));
buffer[length] = '\\0';
chdir(buffer); // we go there to more easily handle errors (delete, zsync)
tcedir = get_current_dir_name();

target_dir = tcedir + "/optional";
last_dir = target_dir;   
ifstream last_dir_file("/opt/.appbrowser");
if ( last_dir_file.is_open() )
{
   getline(last_dir_file,last_dir);
   last_dir_file.close();
}

copy2fsList = tcedir + "/copy2fs.lst";
copy2fsFlag = tcedir + "/copy2fs.flg";

string cmdline, target_boot_option;
ifstream proc_cmdline("/proc/cmdline");
getline(proc_cmdline, cmdline);
proc_cmdline.close();
target_boot_option = "lst=";
int sloc = cmdline.find(target_boot_option);
if ( sloc == string::npos ) {
   onbootName = "onboot.lst";
} else {
   int eloc = cmdline.find(" ",sloc);
   int work = eloc - (sloc + target_boot_option.length());
   onbootName = cmdline.substr(sloc+target_boot_option.length(),work);
}

onbootList = tcedir + "/" + onbootName;

chdir(target_dir.c_str()); // we go there to more easily handle errors (delete, zsync)

// first run?
if (access("../firstrun", F_OK)) {
	creat("../firstrun", S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
	if (fl_ask("First run - would you like the system to pick the fastest mirror?") == 1)
		mirrorpicker();
}


// Test writable 
string testfile = "test.test";
ofstream writest(testfile.c_str());
if (writest.fail()) {
   fl_message("Fatal Error: TCE Directory is not writable.");
   exit(1);
}
writest.close();
unlink(testfile.c_str());} {}
  Fl_Window window {
    label {Apps: Regular Applications (tcz)}
    user_data {"quit"}
    callback menuCB open
    xywh {29 100 690 428} type Double hide resizable
  } {
    Fl_Menu_Bar menuBarApps {
      xywh {5 7 55 20}
    } {
      Submenu menuApps {
        label Apps
        xywh {0 0 55 20}
      } {
        Submenu {} {
          label {Cloud (Remote)}
          xywh {0 0 63 20}
        } {
          MenuItem {} {
            label Browse
            user_data {"tcz"}
            callback menuCB
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label {Select Mirror}
            user_data {"mirror"}
            callback mirrorCB
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label {Select fastest mirror}
            callback {mirrorpicker();
outURI->value(mirror.c_str());}
            xywh {0 0 30 20}
          }
        }
        MenuItem {} {
          label {Load App Locally}
          user_data {"LoadLocal"}
          callback menuCB
          xywh {5 5 30 20}
        }
        Submenu {} {
          label Maintenance
          xywh {5 5 63 20}
        } {
          MenuItem {} {
            label {Md5 Checking}
            user_data {"md5s"}
            callback menuCB
            xywh {10 10 30 20}
          }
          MenuItem {} {
            label {Check for Updates}
            user_data {"updates"}
            callback menuCB
            xywh {10 10 30 20}
          }
          MenuItem {} {
            label {Check for Orphans}
            user_data {"orphans"}
            callback menuCB
            xywh {20 20 30 20}
          }
          MenuItem {} {
            label {Dependencies And Deletions}
            user_data {"menuDepends"}
            callback menuCB
            xywh {5 5 30 20}
          }
          MenuItem {} {
            label {Check Onboot Unneeded}
            user_data {"unneeded"}
            callback menuCB
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label {OnBoot Maintenance}
            user_data {"onboot"}
            callback menuCB
            xywh {5 5 30 20}
          }
          MenuItem {} {
            label {OnDemand Maintenance}
            user_data {"ondemand"}
            callback menuCB
            xywh {5 5 30 20}
          }
        }
        Submenu {} {
          label {Installation Options}
          xywh {5 5 63 20}
        } {
          MenuItem {} {
            label {Toggle Default Install to File System Flag}
            user_data {"copy2fs"}
            callback menuCB
            xywh {5 5 30 20}
          }
          MenuItem {} {
            label {Selective Copy Install to File System}
            user_data {"SelectiveCopy"}
            callback menuCB
            xywh {5 5 30 20}
          }
        }
        MenuItem {} {
          label Quit
          user_data {"quit"}
          callback menuCB
          xywh {5 5 30 20}
        }
      }
    }
    Fl_Menu_Bar menuBarDepends {
      xywh {5 7 120 20} hide
    } {
      Submenu {} {
        label Dependencies
        xywh {0 0 128 20}
      } {
        MenuItem {} {
          label {Update .dep files.}
          user_data {"updatedeps"}
          callback dependsCB
          xywh {0 0 30 20}
        }
        MenuItem {} {
          label {Build Reporting Database}
          user_data {"builddb"}
          callback dependsCB
          xywh {0 0 30 20} divider
        }
        MenuItem menu_auditall {
          label {Missing Dependencies Reporting}
          user_data {"auditall"}
          callback dependsCB
          xywh {0 0 30 20}
        }
        MenuItem menu_fetchmissing {
          label {Fetch Missing Dependencies}
          user_data {"fetchmissing"}
          callback dependsCB
          xywh {0 0 30 20} divider
        }
        MenuItem menu_nodepends {
          label {Display All with No Dependencies}
          user_data {"nodepends"}
          callback dependsCB
          xywh {0 0 30 20}
        }
        MenuItem menu_notrequired {
          label {Display All Not Depended On}
          user_data {"notrequired"}
          callback dependsCB
          xywh {0 0 30 20} divider
        }
        MenuItem menu_dependson {
          label {List Dependencies}
          user_data {"dependson"}
          callback dependsCB
          xywh {0 0 30 20} deactivate
        }
        MenuItem menu_requiredby {
          label {List Required By}
          user_data {"requiredby"}
          callback dependsCB
          xywh {0 0 30 20} deactivate
        }
        MenuItem menu_missing {
          label {List Missing Dependencies}
          user_data {"audit"}
          callback dependsCB
          xywh {0 0 30 20} deactivate divider
        }
        MenuItem menu_delete {
          label {Mark for Deletion}
          user_data {"delete"}
          callback dependsCB
          xywh {0 0 30 20} deactivate
        }
        MenuItem menu_marked {
          label {Display Marked for Deletion}
          user_data {"display_marked"}
          callback dependsCB
          xywh {0 0 30 20}
        }
        MenuItem menu_clearlst {
          label {Clear Marked for Deletion}
          user_data {"clearlst"}
          callback dependsCB
          xywh {0 0 30 20} divider
        }
        MenuItem {} {
          label {Exit Dependency Check}
          user_data {"exit_depends"}
          callback dependsCB
          xywh {0 0 30 20}
        }
      }
    }
    Fl_Group grpBrowse {
      xywh {0 -1 695 426}
    } {
      Fl_Group grpSearch {
        xywh {65 7 620 20}
      } {
        Fl_Choice search_choices {
          xywh {68 7 93 20} down_box BORDER_BOX deactivate
        } {
          MenuItem {} {
            label Search
            xywh {10 10 30 20}
          }
          MenuItem {} {
            label Provides
            xywh {10 10 30 20}
          }
          MenuItem {} {
            label Tags
            xywh {10 10 30 20}
          }
        }
        Fl_Input search_field {
          user_data {"search"}
          callback btnCB
          xywh {165 7 520 20} labeltype NO_LABEL when 8 deactivate resizable
        }
      }
      Fl_Box boxSelect {
        xywh {45 31 120 16} deactivate
      }
      Fl_Browser brwSelect {
        callback brwSelectCB
        xywh {5 52 200 325} type Hold textfont 4
      }
      Fl_Tabs tabs {
        callback tabsGroupCB
        xywh {210 27 475 350}
      } {
        Fl_Group infoTab {
          label Info open
          xywh {210 52 475 325} when 1 hide deactivate
        } {
          Fl_Text_Display infoDisplay {
            xywh {215 57 470 318} textfont 4
            code0 {infoDisplay->buffer(txtBuffer);}
          }
        }
        Fl_Group filesTab {
          label Files open
          xywh {210 52 475 325} when 1 deactivate
        } {
          Fl_Text_Display filesDisplay {
            xywh {215 52 470 323} textfont 4
            code0 {filesDisplay->buffer(txtBuffer);}
          }
        }
        Fl_Group dependsTab {
          label Depends
          xywh {210 52 475 325} hide deactivate
        } {
          Fl_Text_Display dependsDisplay {
            xywh {215 57 470 318} labelfont 1 textfont 4
            code0 {dependsDisplay->buffer(txtBuffer);}
          }
        }
        Fl_Group sizeTab {
          label Size open
          xywh {210 52 475 325} hide deactivate
        } {
          Fl_Text_Display sizeDisplay {
            xywh {215 57 470 318} textfont 4
            code0 {sizeDisplay->buffer(txtBuffer);}
          }
        }
      }
      Fl_Choice install_choices {
        xywh {8 380 140 20} down_box BORDER_BOX
      } {
        MenuItem {} {
          label OnBoot
          xywh {5 5 30 20}
        }
        MenuItem {} {
          label OnDemand
          xywh {5 5 30 20}
        }
        MenuItem {} {
          label {Download + Load}
          xywh {5 5 30 20}
        }
        MenuItem {} {
          label {Download Only}
          xywh {5 5 30 20}
        }
      }
      Fl_Button btnGo {
        label Go
        user_data {"go"}
        callback btnCB
        xywh {150 380 30 20} deactivate
      }
      Fl_Output outputStatus {
        label Status
        xywh {230 380 420 20} color 55
        code0 {outputStatus->value(target_dir.c_str());}
        code1 {outputStatus->label("  TCE:");}
      }
      Fl_Button btn_tce {
        label Set
        user_data {"setdrive"}
        callback btnCB
        xywh {650 380 36 20} deactivate
        code0 {if (target_dir.compare(0,8,"/tmp/tce") == 0 ){btn_tce->activate();outputStatus->color(9);};}
      }
      Fl_Output outURI {
        label {URI:}
        xywh {40 401 646 20} color 29
        code0 {outURI->value(mirror.c_str());}
      }
    }
    Fl_Group grpAudit {open
      xywh {0 -1 690 426} hide
    } {
      Fl_Box boxExtn {
        label Select
        xywh {0 31 200 16}
      }
      Fl_Group grpSingle {
        xywh {5 52 200 348}
      } {
        Fl_Browser brwExtn {
          callback brwExtnCB
          xywh {5 52 200 325} type Hold textfont 4
        }
        Fl_Button btnSingle {
          label Go
          callback btnSingleCB
          xywh {5 380 75 20} deactivate
        }
      }
      Fl_Box boxResults {
        label Results
        xywh {205 34 470 17} labelfont 1
      }
      Fl_Group grpMulti {
        xywh {5 52 200 348}
      } {
        Fl_Browser brwMulti {
          callback brwMultiCB
          xywh {5 52 200 325} type Multi textfont 4
        }
        Fl_Button btnMulti {
          label {Process Selected Item(s)}
          callback btnMultiCB
          xywh {5 380 200 20}
        }
      }
      Fl_Browser brwResults {
        callback brwResultsCB
        xywh {210 52 475 325} type Hold textfont 4
      }
      Fl_Button btnResults {
        label Go
        callback btnResultsCB
        xywh {210 380 80 20} deactivate
      }
      Fl_Output outTCE {
        label {TCE:}
        xywh {40 401 646 20} color 29
        code0 {outTCE->value(target_dir.c_str());}
      }
    }
  }
} 
