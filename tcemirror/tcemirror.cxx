// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "tcemirror.h"
// (c) Robert Shingledecker 2008
#include <iostream>
#include <fstream>
using namespace std;
static string url, protocol, repository; 

void btnCallback(Fl_Widget*, void* userdata) {
  if (userdata == "cancel" )
   exit(1);
if (userdata == "ok")
{
    url = urlInput->value();
    protocol = protocolInput->value();
    repository = repositoryInput->value();
    ofstream fout("/opt/.tcrc", ios::out|ios::out);
    if (! fout.is_open())
    {
       cerr << "Can't open .tcrc for output!" << endl;
       exit(EXIT_FAILURE);
    }
    fout << "Mirror: " << url << endl;
    fout << "Protocol: " << protocol << endl;
    fout << "Repository: " << repository << endl;
    fout.close();
    exit(0);
}
}

Fl_Input *urlInput=(Fl_Input *)0;

Fl_Input *protocolInput=(Fl_Input *)0;

Fl_Input *repositoryInput=(Fl_Input *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(430, 130, "Select Download Mirror");
    w = o;
    { urlInput = new Fl_Input(78, 11, 345, 24, "URL:");
      urlInput->value("www.tinycorelinux.com/files");
    } // Fl_Input* urlInput
    { protocolInput = new Fl_Input(78, 40, 45, 24, "Protocol:");
      protocolInput->value("http");
    } // Fl_Input* protocolInput
    { repositoryInput = new Fl_Input(80, 68, 45, 24, "Repository:");
      repositoryInput->value("tce");
    } // Fl_Input* repositoryInput
    { Fl_Button* o = new Fl_Button(115, 100, 64, 20, "&Select");
      o->callback((Fl_Callback*)btnCallback, (void*)("select"));
      o->deactivate();
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(185, 100, 64, 20, "&OK");
      o->callback((Fl_Callback*)btnCallback, (void*)("ok"));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(255, 100, 64, 20, "&Cancel");
      o->callback((Fl_Callback*)btnCallback, (void*)("cancel"));
    } // Fl_Button* o
    o->end();
  } // Fl_Double_Window* o
  ifstream fin("/opt/.tcrc");
getline(fin,url);
getline(fin,protocol);
getline(fin,repository);
fin.close();
int i;
i = url.find(":");
url = url.substr(i+2,url.size());
i = protocol.find(":");
protocol = protocol.substr(i+2,url.size());
i = repository.find(":");
repository = repository.substr(i+2,repository.size());
urlInput->value(url.c_str());
protocolInput->value(protocol.c_str());
repositoryInput->value(repository.c_str());
  w->show(argc, argv);
  return Fl::run();
}
