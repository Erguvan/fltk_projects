# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008-2011} {} 

decl {\#include <unistd.h>} {public global
} 

decl {\#include <cstdlib>} {} 

decl {\#include <iostream>} {} 

decl {\#include <sstream>} {} 

decl {\#include <fstream>} {} 

decl {\#include <vector>} {} 

decl {\#include <locale.h>} {} 

decl {\#include <stdint.h>} {global
} 

decl {\#include <FL/Fl_Button.H>} {} 

decl {using namespace std;} {} 

decl {int size, selected, xPos, yPos;} {} 

decl {string filemgr, winPos;} {} 

decl {istringstream ins;} {} 

decl {vector<string> mountList;} {global
} 

decl {vector<int> mountState;} {} 

decl {vector<Fl_Button*> btn;} {} 

decl {vector<string> mountLabels;} {global
} 

Function {getPos()} {open return_type {static void}
} {
  code {xPos = w->x();
yPos = w->y();} {}
} 

Function {refresh()} {open
} {
  code {getMountables();
if ( size == 0 ) 
  exit(1);

pack->clear();

for (int i=0; i < size; i++)
{  
   Fl_Button* btn[i];
   
   btn[i] = new Fl_Button(0,0,80,25);
   btn[i]->label(mountList[i].c_str());
   btn[i]->tooltip(mountLabels[i].c_str());
   btn[i]->callback((Fl_Callback*)btnCallback,(void*)(uintptr_t)i);

   if ( mountState[i] == 0)
      btn[i]->color((Fl_Color)2);
   else
      btn[i]->color((Fl_Color)1);
      
   pack->add(btn[i]);
      
}

Fl_Button* btnRefresh;
btnRefresh = new Fl_Button(0,0,80,25);
btnRefresh->label("Refresh");
btnRefresh->callback((Fl_Callback*)btnRefreshCallback);
pack->add(btnRefresh);

selected = 0;
pack->redraw();
w->resize(0,0,80,(25*(size+1)));
w->position(xPos,yPos);
w->redraw();} {}
} 

Function {getMountables()} {open return_type void
} {
  code {mountList.clear();
mountState.clear();

 system("mountables.sh");

ifstream fin("/tmp/mountables");
string line;
string commandHead = "grep '/mnt/";
string commandTail = " ' /etc/mtab >/dev/null";

while ( getline(fin,line) )
{
   int sepator = line.find("~",0);
   string device = line.substr(0, sepator);
   string label = line.substr(sepator+1);
   mountList.push_back(device);
   mountState.push_back(system((commandHead + device + commandTail).c_str()));
   mountLabels.push_back(label);
}   
fin.close();
unlink("/tmp/mountables");

size = mountList.size();} {}
} 

Function {btnCallback(Fl_Widget*, void* userdata)} {open return_type {static void}
} {
  code {getPos();
int results;
selected = (long)userdata;
if (mountState.at(selected) == 0)   // mounted
{
   results = system(("sudo umount /dev/" + mountList.at(selected)).c_str());
   if (results == 0)
   {
      pack->child(selected)->color((Fl_Color)1);         
      mountState.at(selected)=256;
   }    
}   
else
{
   results = system(("sudo mount /dev/" + mountList.at(selected)).c_str());
   if (results == 0)
   {
      pack->child(selected)->color((Fl_Color)2);         
      mountState.at(selected)=0;
      if (filemgr.length() > 0)
      {
         system((filemgr + " /mnt/" + mountList.at(selected) +"&" ).c_str());
         exit(0);
      }
   }
}} {}
} 

Function {btnRefreshCallback(Fl_Widget*, void* userdata)} {open return_type {static void}
} {
  code {getPos();
refresh();} {}
} 

Function {} {open
} {
  code {Fl::args(argc, argv);
setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");} {selected
  }
  Fl_Window w {open
    xywh {267 20 85 745} type Double hide
  } {
    Fl_Pack pack {open
      xywh {0 0 80 500}
    } {}
  }
  code {if (getenv("FILEMGR"))
   filemgr = getenv("FILEMGR");

xPos=80;
yPos=60;   

if (getenv("MNTTOOL")) { 
   winPos = getenv("MNTTOOL");
   ins.str(winPos);
   ins >> xPos >> yPos;
}   
   
refresh();} {}
} 
