# data file for the Fltk User Interface Designer (fluid)
version 1.0109 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008} {} 

decl {\#include <iostream>} {} 

decl {\#include <stdio.h>} {} 

decl {\#include <string>} {} 

decl {\#include <fstream>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {using namespace std;} {} 

decl {string backup_device;} {} 

decl {int action=1;} {} 

decl {bool backup=true;} {} 

decl {string commandStr = "exitcheck.sh ";} {} 

decl {string actionStr;} {} 

Function {btn_callback(Fl_Widget*, void*userdata)} {open return_type {static void}
} {
  code {if (userdata == "prompt") {
  btn_backup->hide();
  action = 3;
} else if (userdata == "shutdown") {
  btn_backup->show();
  action = 1;
} else if (userdata == "reboot") {
  btn_backup->show();
  action = 2;
}
if (userdata == "backup") {
   backup = not(backup);
}
if (userdata == "cancel") {
  exit(0);
} else if (userdata == "ok") {
  if (action == 3) {
//     system("sudo pkill Xvesa || sudo pkill Xfbdev || sudo pkill Xorg");
     system("sudo pkill `cat /etc/sysconfig/Xserver` &");
     exit(0);
  } else {
    if (backup) {
      if ( backup_device.size() == 0)
      {
         fl_message("No backup device has been selected.\\nUse Control Panel Backup/Restore option to set");
         exit(1);
      }      
      system("touch /tmp/do_backup");
    } else {
      system(">/opt/.backup_device");
    }
    if (action == 1) {
       actionStr = "shutdown ";
    } else {
       actionStr = "reboot ";
    }
    commandStr += actionStr;
    system( (const char *)commandStr.c_str());
    exit(0);
  }  
}} {selected
  }
} 

Function {} {open
} {
  Fl_Window {} {
    label {TC Exit Options} open
    xywh {323 162 185 160} type Double hide
  } {
    Fl_Group {} {open
      xywh {25 25 115 55}
    } {
      Fl_Round_Button {} {
        label Shutdown
        user_data {"shutdown"}
        callback btn_callback
        xywh {25 25 85 15} type Radio down_box ROUND_DOWN_BOX value 1
      }
      Fl_Round_Button {} {
        label Reboot
        user_data {"reboot"}
        callback btn_callback
        xywh {25 45 65 15} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Round_Button {} {
        label {Exit to Prompt}
        user_data {"prompt"}
        callback btn_callback
        xywh {25 65 110 15} type Radio down_box ROUND_DOWN_BOX
      }
    }
    Fl_Check_Button btn_backup {
      label Backup
      user_data {"backup"}
      callback btn_callback
      xywh {40 95 70 15} down_box DOWN_BOX value 1
      code0 {if ( !backup ) btn_backup->value(0);}
    }
    Fl_Return_Button {} {
      label {&OK}
      user_data {"ok"}
      callback btn_callback
      xywh {15 125 70 20}
    }
    Fl_Button {} {
      label {&Cancel}
      user_data {"cancel"}
      callback btn_callback
      xywh {100 125 70 20}
    }
  }
  code {ifstream backup_device_file("/opt/.backup_device");                                  
getline(backup_device_file,backup_device);                                        
backup_device_file.close();

string backupDefault;
backupDefault  = getenv("BACKUP");

if ( backupDefault == "0" )
{
  backup = false;
  btn_backup->value(0);
} else
  backup = true;
   
string cmdline;   
ifstream proc_cmdline_file("/proc/cmdline");                                  
getline(proc_cmdline_file,cmdline);                                        
proc_cmdline_file.close();

int loc = cmdline.find("norestore");
if ( loc == string::npos )
{
  if ( backup_device.size() == 0 )
  {
    string tce_dir;   
    ifstream tce_dir_file("/opt/.tce_dir");                                  
    getline(tce_dir_file,tce_dir);                                        
    tce_dir_file.close();
    if ( tce_dir != "/tmp/tce/" )
      backup_device = tce_dir;
  }      
  
} else {
  backup = false;
  btn_backup->value(0);
}
cout << backup_device << endl;} {}
} 
