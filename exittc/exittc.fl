# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008-2010} {} 

decl {\#include <cstdlib>} {} 

decl {\#include <iostream>} {} 

decl {\#include <stdio.h>} {} 

decl {\#include <string>} {} 

decl {\#include <fstream>} {} 

decl {\#include <FL/fl_message.H>} {} 

decl {\#include <locale.h>} {} 

decl {\#include <unistd.h>} {} 

decl {\#include <string.h>} {} 

decl {using namespace std;} {} 

decl {string backup_device="", command;} {} 

decl {int action=1;} {} 

decl {bool backup=true;} {} 

decl {string commandStr = "exitcheck.sh ";} {} 

decl {string actionStr, backup_options, backup_command;} {} 

Function {btn_callback(Fl_Widget*, void*userdata)} {open return_type {static void}
} {
  code {if (userdata == "cancel")
   exit(0);

if (userdata == "prompt") {
  choices->hide();
  action = 3;
} else if (userdata == "shutdown") {
  choices->show();
  action = 1;
} else if (userdata == "reboot") {
  choices->show();
  action = 2;
}


int backup_choice = choices->value();
switch(backup_choice)
{
   case 0  : backup = false;
             break;
   case 1  : backup = true;
             backup_options = "-b";
             break;
   case 2  : backup = true;
             backup_options = "-bs";
             break;
   default : backup = true;
             backup_options = "-b";
}             
   
   
if (backup) {
   if ( backup_device.size() == 0)
   {
      fl_message("No backup device has been selected.\\nUse Control Panel Backup/Restore option to set");
      exit(1);
   } else {      
     device_output->value(backup_device.c_str());   
   }
}
         
if (userdata == "ok") {
  if (action == 3) {
     command = "sudo kill $( cat /tmp/.X${DISPLAY:1:1}-lock ) &";
     system(command.c_str());
     exit(0);
  } else {
    if (backup) {
      window->cursor(FL_CURSOR_WAIT);
      Fl::flush();
      backup_command = "filetool.sh " + backup_options;
      cout << backup_command << endl;
      int results = system(backup_command.c_str());
      window->cursor(FL_CURSOR_DEFAULT);
      Fl::flush();
      if ( results != 0 )
      {
         fl_message("Errors occurred during backup!\\nSee: /tmp/backup_status.");
         exit(1);
      }
    } else {
      system(">/etc/system/backup_device");
    }
    if (action == 1) {
       actionStr = "shutdown ";
    } else {
       actionStr = "reboot ";
    }
    commandStr += actionStr;
    system( (const char *)commandStr.c_str());
    exit(0);
  }  
}} {selected
  }
} 

Function {} {open
} {
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");} {}
  Fl_Window window {
    label {TC Exit Options} open
    xywh {268 17 180 180} type Double box BORDER_BOX align 4 hide
  } {
    Fl_Group {} {
      xywh {25 10 115 70}
    } {
      Fl_Round_Button {} {
        label Shutdown
        user_data {"shutdown"}
        callback btn_callback
        xywh {25 10 85 15} type Radio down_box ROUND_DOWN_BOX value 1
      }
      Fl_Round_Button {} {
        label Reboot
        user_data {"reboot"}
        callback btn_callback
        xywh {25 30 65 15} type Radio down_box ROUND_DOWN_BOX
      }
      Fl_Round_Button {} {
        label {Exit to Prompt}
        user_data {"prompt"}
        callback btn_callback
        xywh {25 50 110 15} type Radio down_box ROUND_DOWN_BOX
      }
    }
    Fl_Output device_output {
      xywh {15 120 155 25} color 29 labeltype NO_LABEL
    }
    Fl_Choice choices {
      label {Backup Options:}
      xywh {42 87 110 25} down_box BORDER_BOX align 5
    } {
      MenuItem {} {
        label None
        xywh {0 0 30 20}
      }
      MenuItem {} {
        label Backup
        xywh {10 10 30 20}
      }
      MenuItem {} {
        label Safe
        xywh {0 0 30 20}
      }
    }
    Fl_Return_Button btnOK {
      label {&OK}
      user_data {"ok"}
      callback btn_callback
      xywh {15 150 70 20}
      code0 {btnOK->take_focus();}
    }
    Fl_Button {} {
      label {&Cancel}
      user_data {"cancel"}
      callback btn_callback
      xywh {100 150 70 20}
    }
  }
  code {ifstream backup_device_file("/etc/sysconfig/backup_device");
if ( backup_device_file.is_open())
{
	getline(backup_device_file,backup_device);                                        
	backup_device_file.close();
}


string backupDefault="1";
if ( getenv("BACKUP"))
	backupDefault  = getenv("BACKUP");

if ( backupDefault == "0" )
{
  backup = false;
  choices->value(0);
} else {
  backup = true;
  choices->value(1);
}
  
   
string cmdline;   
ifstream proc_cmdline_file("/proc/cmdline");                                  
getline(proc_cmdline_file,cmdline);                                        
proc_cmdline_file.close();

int loc = cmdline.find("norestore");
if ( loc == string::npos )
{
  if ( backup_device.size() == 0 )
  {
       
    string tce_dir;
    char buffer[1024];
    int length;
    length = readlink("/etc/sysconfig/tcedir", buffer, sizeof(buffer));
    buffer[length]='\\0';
    tce_dir = strdup(buffer);
    
    if ( tce_dir == "/tmp/tce" )
    {
      backup = false;
      choices->value(0);
    } else {  
      backup_device = tce_dir;
      choices->value(1);
    }
  }      
  
} else {
  backup = false;
  choices->value(0);
}


int option = cmdline.find("safebackup");
if ( option != string::npos )
{
  backup = true;
  choices->value(2);
}
 

if (backup)
   device_output->value(backup_device.c_str());} {}
} 
