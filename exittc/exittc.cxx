// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "exittc.h"
// (c) Robert Shingledecker 2008
#include <iostream>
#include <stdio.h>
#include <string>
#include <fstream>
#include <FL/fl_message.H>
using namespace std;
static string backup_device; 
static int action=1; 
static bool backup=true; 
static string commandStr = "exitcheck.sh "; 
static string actionStr; 

void btn_callback(Fl_Widget*, void*userdata) {
  if (userdata == "prompt") {
  btn_backup->hide();
  action = 3;
} else if (userdata == "shutdown") {
  btn_backup->show();
  action = 1;
} else if (userdata == "reboot") {
  btn_backup->show();
  action = 2;
}
if (userdata == "backup") {
   backup = not(backup);
}
if (userdata == "cancel") {
  exit(0);
} else if (userdata == "ok") {
  if (action == 3) {
     system("sudo pkill Xvesa || sudo pkill Xfbdev || sudo pkill Xorg");
     exit(0);
  } else {
    if (backup) {
      if ( backup_device.size() == 0)
      {
         fl_message("No backup device has been selected.\nUse Control Panel Backup/Restore option to set");
         exit(1);
      }      
      system("touch /tmp/do_backup");
    } else {
      system(">/opt/.backup_device");
    }
    if (action == 1) {
       actionStr = "shutdown ";
    } else {
       actionStr = "reboot ";
    }
    commandStr += actionStr;
    system( (const char *)commandStr.c_str());
    exit(0);
  }  
}
}

Fl_Check_Button *btn_backup=(Fl_Check_Button *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(185, 160, "TC Exit Options");
    w = o;
    { Fl_Group* o = new Fl_Group(25, 25, 115, 55);
      { Fl_Round_Button* o = new Fl_Round_Button(25, 25, 85, 15, "Shutdown");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)btn_callback, (void*)("shutdown"));
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(25, 45, 65, 15, "Reboot");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)btn_callback, (void*)("reboot"));
      } // Fl_Round_Button* o
      { Fl_Round_Button* o = new Fl_Round_Button(25, 65, 110, 15, "Exit to Prompt");
        o->type(102);
        o->down_box(FL_ROUND_DOWN_BOX);
        o->callback((Fl_Callback*)btn_callback, (void*)("prompt"));
      } // Fl_Round_Button* o
      o->end();
    } // Fl_Group* o
    { btn_backup = new Fl_Check_Button(40, 95, 70, 15, "Backup");
      btn_backup->down_box(FL_DOWN_BOX);
      btn_backup->value(1);
      btn_backup->callback((Fl_Callback*)btn_callback, (void*)("backup"));
      if ( !backup ) btn_backup->value(0);
    } // Fl_Check_Button* btn_backup
    { Fl_Return_Button* o = new Fl_Return_Button(15, 125, 70, 20, "&OK");
      o->callback((Fl_Callback*)btn_callback, (void*)("ok"));
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(100, 125, 70, 20, "&Cancel");
      o->callback((Fl_Callback*)btn_callback, (void*)("cancel"));
    } // Fl_Button* o
    o->end();
  } // Fl_Double_Window* o
  ifstream backup_device_file("/opt/.backup_device");                                  
getline(backup_device_file,backup_device);                                        
backup_device_file.close();

string backupDefault;
backupDefault  = getenv("BACKUP");

if ( backupDefault == "0" )
{
  backup = false;
  btn_backup->value(0);
} else
  backup = true;
   
string cmdline;   
ifstream proc_cmdline_file("/proc/cmdline");                                  
getline(proc_cmdline_file,cmdline);                                        
proc_cmdline_file.close();

int loc = cmdline.find("norestore");
if ( loc == string::npos )
{
  if ( backup_device.size() == 0 )
  {
    string tce_dir;   
    ifstream tce_dir_file("/opt/.tce_dir");                                  
    getline(tce_dir_file,tce_dir);                                        
    tce_dir_file.close();
    if ( tce_dir != "/tmp/tce/" )
      backup_device = tce_dir;
  }      
  
} else {
  backup = false;
  btn_backup->value(0);
}
cout << backup_device << endl;
  w->show(argc, argv);
  return Fl::run();
}
