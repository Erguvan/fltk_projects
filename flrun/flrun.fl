# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {// (c) Robert Shingledecker 2008} {} 

decl {// Command input search by Curaga 2011} {} 

decl {\#include <iostream>} {} 

decl {\#include <string>} {} 

decl {\#include <FL/Fl_File_Chooser.H>} {} 

decl {\#include <locale.h>} {} 

decl {using namespace std;} {} 

Function {matches(const char *param, char ***res, unsigned int *out)} {open private return_type int
} {
  code {char *origpath = getenv("PATH");
        char **dirs, *path, *ptr;

        if (!origpath) return 1;

        DIR *dir;
        struct dirent *ent;
        unsigned int i = 0, j = 1, apps = 0;

	for (i = 0;origpath[i]; i++) {
		if (origpath[i] == ':') j++;
	}
	dirs = (char **) calloc(j, sizeof(char *));

	path = strdup(origpath);
	char *save = path;
	for (i = 0; path; i++) {
		dirs[i] = strdup(path);
		ptr = strchr(dirs[i], ':');

		if (ptr) {
			*ptr = '\\0';
			path = ptr + 1;
		} else path = NULL;
	}
	free(save);

        for (i = 0; i < j; i++) {
                dir = opendir(dirs[i]);
                if (!dir) continue;

                while ((ent = readdir(dir))) {
                        if (ent->d_type == DT_REG || ent->d_type == DT_LNK) apps++;
                }

                closedir(dir);
        }

        char **results = (char **) calloc(apps, sizeof(char *));
        if (!results) return 1;

        for (i = 0, apps = 0; i < j; i++) {
                dir = opendir(dirs[i]);
                if (!dir) continue;

                while ((ent = readdir(dir))) {
                        if (ent->d_type == DT_REG || ent->d_type == DT_LNK) {
                                if (strcasestr(ent->d_name, param)) {
                                        results[apps] = strdup(ent->d_name);
                                        apps++;
                                }
                        }
                }

                closedir(dir);
        }

        *res = results;
        *out = apps;

	for (i = 0; i < j; i++) free(dirs[i]);
	free(dirs);

        return 0;} {}
} 

Function {btn_callback(Fl_Widget*, void* userdata)} {open private return_type {static void}
} {
  code {const string userdatastr = userdata ? (char *) userdata : "";

if (userdatastr == "ok")
{
  string sudo = "";
  if (sudobox->value()) sudo = "sudo ";

  string commandStr1 = sudo + in_command->value();
  string commandStr2 = " 2>/dev/null &";
  string command = commandStr1 + commandStr2;
  system(command.c_str());
  exit(0);
} else { 
    exit(0);
}} {}
} 

Function {choose_cb(Fl_Widget*, void*)} {open private return_type {static void}
} {
  code {Fl_File_Chooser chooser(".",                        // directory
                            "*",                        // filter
                            Fl_File_Chooser::SINGLE,     // chooser type
                            "Select Application to Run");  // title
    chooser.show();                                             

    // Block until user picks something.
    //     (The other way to do this is to use a callback())
    //                                                      
    while(chooser.shown())
        { Fl::wait(); }

    // User hit cancel?
    if ( chooser.value() == NULL )
       return; 
 
    in_command->value(chooser.value());} {}
} 

Function {sort(const void *p1, const void *p2)} {open private return_type int
} {
  code {int i = strcmp(* (char * const *)p1, * (char * const *)p2);
if (i > 0) i = -1;
else if (i < 0) i = 1;

return i;} {}
} 

Function {search_cb(Fl_Widget *, void *)} {open private return_type void
} {
  code {in_command->clear();

char **results;
unsigned int i;

if (matches(in_command->value(), &results, &i) != 0) return;

qsort(&results[0], i, sizeof (char *), sort);

if (i == 1) in_command->value(results[0]);

for (; i; i--) {
	in_command->add(results[i-1]);
	free(results[i-1]);
}
free(results);} {}
} 

Function {} {open
} {
  code {setlocale(LC_ALL, "");
bindtextdomain("tinycore","/usr/local/share/locale");
textdomain("tinycore");} {}
  Fl_Window w {
    label FLRun open
    private xywh {700 475 265 125} type Double hide
  } {
    Fl_Return_Button {} {
      label OK
      user_data {"ok"}
      callback btn_callback
      xywh {25 85 66 20}
    }
    Fl_Button {} {
      label {&Cancel}
      user_data {"cancel"}
      callback btn_callback
      xywh {100 85 64 20}
    }
    Fl_Button {} {
      label Browse
      callback choose_cb
      xywh {175 85 64 20}
    }
    Fl_Input_Choice in_command {
      label {Application launcher}
      callback search_cb open
      xywh {25 25 215 24} align 1 when 1
    } {}
    Fl_Check_Button sudobox {
      label {Run with sudo}
      xywh {25 60 215 15} down_box DOWN_BOX
    }
  }
  code {w->show(argc, argv);
in_command->take_focus();} {}
} 
